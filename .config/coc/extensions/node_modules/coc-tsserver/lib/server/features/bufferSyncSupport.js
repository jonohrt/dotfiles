"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const api_1 = tslib_1.__importDefault(require("../utils/api"));
const async_1 = require("../utils/async");
const languageModeIds = tslib_1.__importStar(require("../utils/languageModeIds"));
function mode2ScriptKind(mode) {
    switch (mode) {
        case languageModeIds.typescript:
            return 'TS';
        case languageModeIds.typescripttsx:
            return 'TSX';
        case languageModeIds.typescriptjsx:
            return 'TSX';
        case languageModeIds.typescriptreact:
            return 'TSX';
        case languageModeIds.javascript:
            return 'JS';
        case languageModeIds.javascriptreact:
            return 'JSX';
    }
    return undefined;
}
class BufferSyncSupport {
    constructor(client, modeIds, validate) {
        this.uris = new Set();
        this.disposables = [];
        this.pendingDiagnostics = new Map();
        this.client = client;
        this.modeIds = new Set(modeIds);
        this._validate = validate || false;
        this.diagnosticDelayer = new async_1.Delayer(300);
    }
    listen() {
        coc_nvim_1.workspace.onDidOpenTextDocument(this.onDidOpenTextDocument, this, this.disposables);
        coc_nvim_1.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, this.disposables);
        coc_nvim_1.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, this.disposables);
        coc_nvim_1.workspace.textDocuments.forEach(this.onDidOpenTextDocument, this);
    }
    reInitialize() {
        coc_nvim_1.workspace.textDocuments.forEach(this.onDidOpenTextDocument, this);
    }
    set validate(value) {
        this._validate = value;
    }
    dispose() {
        this.pendingDiagnostics.clear();
        coc_nvim_1.disposeAll(this.disposables);
    }
    onDidOpenTextDocument(document) {
        if (!this.modeIds.has(document.languageId))
            return;
        let { uri } = document;
        let filepath = this.client.toPath(uri);
        this.uris.add(uri);
        const args = {
            file: filepath,
            fileContent: document.getText()
        };
        if (this.client.apiVersion.gte(api_1.default.v203)) {
            const scriptKind = mode2ScriptKind(document.languageId);
            if (scriptKind) {
                args.scriptKindName = scriptKind;
            }
        }
        if (this.client.apiVersion.gte(api_1.default.v230)) {
            let root = this.client.getProjectRootPath(document.uri);
            if (root)
                args.projectRootPath = root;
        }
        this.client.executeWithoutWaitingForResponse('open', args); // tslint:disable-line
        this.requestDiagnostic(uri);
    }
    onDidCloseTextDocument(document) {
        let { uri } = document;
        if (!this.uris.has(uri))
            return;
        let filepath = this.client.toPath(uri);
        const args = {
            file: filepath
        };
        this.client.executeWithoutWaitingForResponse('close', args); // tslint:disable-line
    }
    onDidChangeTextDocument(e) {
        let { textDocument, contentChanges } = e;
        let { uri } = textDocument;
        if (!this.uris.has(uri))
            return;
        let filepath = this.client.toPath(uri);
        for (const { range, text } of contentChanges) {
            const args = {
                file: filepath,
                line: range ? range.start.line + 1 : 1,
                offset: range ? range.start.character + 1 : 1,
                endLine: range ? range.end.line + 1 : Math.pow(2, 24),
                endOffset: range ? range.end.character + 1 : 1,
                insertString: text
            };
            this.client.executeWithoutWaitingForResponse('change', args); // tslint:disable-line
        }
        const didTrigger = this.requestDiagnostic(uri);
        if (!didTrigger && this.pendingGetErr) {
            // In this case we always want to re-trigger all diagnostics
            this.pendingGetErr.cancel();
            this.pendingGetErr = undefined;
            this.triggerDiagnostics();
        }
    }
    interuptGetErr(f) {
        if (!this.pendingGetErr) {
            return f();
        }
        this.pendingGetErr.cancel();
        this.pendingGetErr = undefined;
        const result = f();
        this.triggerDiagnostics();
        return result;
    }
    triggerDiagnostics(delay = 200) {
        this.diagnosticDelayer.trigger(() => {
            this.sendPendingDiagnostics();
        }, delay);
    }
    requestAllDiagnostics() {
        if (!this._validate) {
            return;
        }
        for (const uri of this.uris) {
            this.pendingDiagnostics.set(uri, Date.now());
        }
        this.diagnosticDelayer.trigger(() => {
            this.sendPendingDiagnostics();
        }, 200);
    }
    requestDiagnostic(uri) {
        if (!this._validate) {
            return false;
        }
        let document = coc_nvim_1.workspace.getDocument(uri);
        if (!document)
            return false;
        this.pendingDiagnostics.set(uri, Date.now());
        const lineCount = document.lineCount;
        const delay = Math.min(Math.max(Math.ceil(lineCount / 20), 300), 800);
        this.triggerDiagnostics(delay);
        return true;
    }
    hasPendingDiagnostics(uri) {
        return this.pendingDiagnostics.has(uri);
    }
    sendPendingDiagnostics() {
        if (!this._validate) {
            return;
        }
        const uris = Array.from(this.pendingDiagnostics.entries())
            .sort((a, b) => a[1] - b[1])
            .map(entry => entry[0]);
        // Add all open TS buffers to the geterr request. They might be visible
        for (const uri of this.uris) {
            if (uris.indexOf(uri) == -1) {
                uris.push(uri);
            }
        }
        let files = uris.map(uri => this.client.toPath(uri));
        if (files.length) {
            if (this.pendingGetErr)
                this.pendingGetErr.cancel();
            const getErr = this.pendingGetErr = GetErrRequest.executeGetErrRequest(this.client, files, () => {
                if (this.pendingGetErr === getErr) {
                    this.pendingGetErr = undefined;
                }
            });
        }
        this.pendingDiagnostics.clear();
    }
}
exports.default = BufferSyncSupport;
class GetErrRequest {
    constructor(client, files, _token, onDone) {
        this.files = files;
        this._token = _token;
        this._done = false;
        const args = {
            delay: 0,
            files: this.files
        };
        const done = () => {
            if (this._done) {
                return;
            }
            this._done = true;
            onDone();
        };
        client.executeAsync('geterr', args, _token.token).then(done, done);
    }
    static executeGetErrRequest(client, files, onDone) {
        const token = new vscode_languageserver_protocol_1.CancellationTokenSource();
        return new GetErrRequest(client, files, token, onDone);
    }
    cancel() {
        if (!this._done) {
            this._token.cancel();
        }
        this._token.dispose();
    }
}
//# sourceMappingURL=bufferSyncSupport.js.map