"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const language_client_1 = require("./language-client");
const util_1 = require("./util");
const which_1 = tslib_1.__importDefault(require("which"));
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let { subscriptions } = context;
        const config = coc_nvim_1.workspace.getConfiguration().get('solargraph', {});
        const enable = config.enable;
        if (enable === false)
            return;
        let command = config.commandPath || 'solargraph';
        try {
            which_1.default.sync(command);
        }
        catch (e) {
            coc_nvim_1.workspace.showMessage(`Solargraph command '${command}' not found!`, 'error');
            return;
        }
        let solargraphConfiguration = Object.assign({
            commandPath: 'solargraph',
            useBundler: false,
            bundlerPath: 'bundle',
            withSnippets: true,
            workspace: coc_nvim_1.workspace.root
        }, config);
        const selector = config.filetypes || ['ruby'];
        let client = language_client_1.makeLanguageClient(selector, solargraphConfiguration);
        subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
        client.onReady().then(() => {
            if (config.checkGemVersion) {
                util_1.verifyGemIsCurrent();
            }
            registerCommand(client, config, subscriptions);
        }, _e => {
            // noop
        });
    });
}
exports.activate = activate;
function registerCommand(client, config, subscriptions) {
    subscriptions.push(coc_nvim_1.commands.registerCommand('solargraph.buildGemDocs', () => {
        client.sendNotification('$/solargraph/documentGems', { rebuild: false });
    }));
    subscriptions.push(coc_nvim_1.commands.registerCommand('solargraph.checkGemVersion', () => {
        util_1.verifyGemIsCurrent();
    }));
    subscriptions.push(coc_nvim_1.commands.registerCommand('solargraph.rebuildAllGemDocs', () => {
        client.sendNotification('$/solargraph/documentGems', { rebuild: true });
    }));
    subscriptions.push(coc_nvim_1.commands.registerCommand('solargraph.config', () => {
        util_1.createConfig(config);
    }));
    subscriptions.push(coc_nvim_1.commands.registerCommand('solargraph.downloadCore', () => {
        util_1.downloadCore(config);
    }));
}
//# sourceMappingURL=index.js.map