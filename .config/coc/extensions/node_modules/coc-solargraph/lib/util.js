"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
function verifyGemIsCurrent() {
    coc_nvim_1.workspace.runCommand('gem outdated').then(res => {
        if (res.match(/[\s]solargraph[\s]/)) {
            notifyGemUpdate();
        }
        else {
            coc_nvim_1.workspace.showMessage('The Solargraph gem is up to date.', 'more');
        }
    }, _e => {
        // noop
    });
}
exports.verifyGemIsCurrent = verifyGemIsCurrent;
function downloadCore(configuration) {
    let cmd = getCommands(configuration, 'download-core');
    coc_nvim_1.workspace.nvim.call('coc#util#open_terminal', [{
            id: 0,
            cmd
        }], true);
}
exports.downloadCore = downloadCore;
function createConfig(configuration) {
    let cmd = getCommands(configuration, 'download-core');
    coc_nvim_1.workspace.runCommand(cmd).then(res => {
        if (res) {
            coc_nvim_1.workspace.showMessage('Created default .solargraph.yml file.', 'more');
        }
    }, _e => {
        // noop
    });
}
exports.createConfig = createConfig;
function getCommands(configuration, ...args) {
    let cmds = [];
    if (configuration.useBundler) {
        cmds.push(configuration.bundlerPath, 'exec', 'solargraph');
    }
    else {
        cmds.push(configuration.commandPath);
    }
    cmds.push(...args);
    return cmds.join(' ');
}
function notifyGemUpdate() {
    if (coc_nvim_1.workspace.getConfiguration('solargraph').useBundler) {
        coc_nvim_1.workspace.showMessage('A new version of the Solargraph gem is available. Update your Gemfile to install it.', 'more');
    }
    else {
        coc_nvim_1.workspace.showMessage('A new version of the Solargraph gem is available. Run `gem update solargraph` to install it.', 'more');
    }
}
//# sourceMappingURL=util.js.map