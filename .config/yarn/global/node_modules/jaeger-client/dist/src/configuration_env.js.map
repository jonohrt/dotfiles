{"version":3,"sources":["../../src/configuration_env.js"],"names":["ConfigurationEnv","obj","key","defaultValue","config","samplerConfig","value","_getConfigValue","sampler","process","env","JAEGER_SAMPLER_TYPE","type","JAEGER_SAMPLER_PARAM","param","parseFloat","JAEGER_SAMPLER_HOST","host","JAEGER_SAMPLER_PORT","port","parseInt","JAEGER_SAMPLER_REFRESH_INTERVAL","refreshIntervalMs","reporterConfig","reporter","JAEGER_REPORTER_LOG_SPANS","logSpans","JAEGER_REPORTER_FLUSH_INTERVAL","flushIntervalMs","JAEGER_REPORTER_ENDPOINT","collectorEndpoint","JAEGER_REPORTER_USER","username","JAEGER_REPORTER_PASSWORD","password","JAEGER_REPORTER_AGENT_HOST","agentHost","JAEGER_REPORTER_AGENT_PORT","agentPort","options","tags","JAEGER_TAGS","tagsList","split","len","length","idx","kv","k","trim","v","startsWith","endsWith","ed","substring","disable","JAEGER_DISABLE","serviceName","JAEGER_SERVICE_NAME","_parseTagsFromEnv","_getSamplerFromEnv","Object","keys","_getReporterFromEnv","initTracer"],"mappings":"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","file":"configuration_env.js","sourcesContent":["// Copyright (c) 2018 Jaeger Author.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport Configuration from './configuration.js';\nimport Utils from './util.js';\n\nexport default class ConfigurationEnv {\n  static _getConfigValue(obj, key, defaultValue) {\n    return (obj && obj[key]) || defaultValue;\n  }\n\n  static _getSamplerFromEnv(config) {\n    let samplerConfig = {};\n    let value = ConfigurationEnv._getConfigValue(config.sampler, 'type', process.env.JAEGER_SAMPLER_TYPE);\n    if (value) {\n      samplerConfig.type = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(config.sampler, 'param', process.env.JAEGER_SAMPLER_PARAM);\n    if (value) {\n      samplerConfig.param = parseFloat(value);\n    }\n\n    value = ConfigurationEnv._getConfigValue(config.sampler, 'host', process.env.JAEGER_SAMPLER_HOST);\n    if (value) {\n      samplerConfig.host = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(config.sampler, 'port', process.env.JAEGER_SAMPLER_PORT);\n    if (value) {\n      samplerConfig.port = parseInt(value);\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.sampler,\n      'refreshIntervalMs',\n      process.env.JAEGER_SAMPLER_REFRESH_INTERVAL\n    );\n    if (value) {\n      samplerConfig.refreshIntervalMs = parseInt(value);\n    }\n\n    return samplerConfig;\n  }\n\n  static _getReporterFromEnv(config) {\n    let reporterConfig = {};\n    let value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'logSpans',\n      process.env.JAEGER_REPORTER_LOG_SPANS\n    );\n    if (value) {\n      reporterConfig.logSpans = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'flushIntervalMs',\n      process.env.JAEGER_REPORTER_FLUSH_INTERVAL\n    );\n    if (value) {\n      reporterConfig.flushIntervalMs = parseInt(value);\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'collectorEndpoint',\n      process.env.JAEGER_REPORTER_ENDPOINT\n    );\n    if (value) {\n      reporterConfig.collectorEndpoint = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(config.reporter, 'username', process.env.JAEGER_REPORTER_USER);\n    if (value) {\n      reporterConfig.username = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'password',\n      process.env.JAEGER_REPORTER_PASSWORD\n    );\n    if (value) {\n      reporterConfig.password = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'agentHost',\n      process.env.JAEGER_REPORTER_AGENT_HOST\n    );\n    if (value) {\n      reporterConfig.agentHost = value;\n    }\n\n    value = ConfigurationEnv._getConfigValue(\n      config.reporter,\n      'agentPort',\n      process.env.JAEGER_REPORTER_AGENT_PORT\n    );\n    if (value) {\n      reporterConfig.agentPort = parseInt(value);\n    }\n\n    return reporterConfig;\n  }\n\n  static _parseTagsFromEnv(options) {\n    if (options.tags) {\n      return options.tags;\n    }\n    let tags = {};\n    if (process.env.JAEGER_TAGS) {\n      let tagsList = process.env.JAEGER_TAGS.split(',');\n      let len = tagsList.length;\n      let idx = 0;\n      while (idx < len) {\n        let kv = tagsList[idx].split('=');\n        let k = kv[0].trim();\n        let v = kv[1].trim();\n        if (Utils.startsWith(v, '${') && Utils.endsWith(v, '}')) {\n          let ed = v.substring(2, v.length - 1).split(':');\n          v = process.env[ed[0]];\n          if (!v && ed[1] !== '') {\n            v = ed[1];\n          }\n        }\n        tags[k] = v;\n        idx += 1;\n      }\n    }\n    return tags;\n  }\n\n  /**\n   * Initialize and return a new instance of Jaeger Tracer from environment variables.\n   * config or options can be passed to override environment variables.\n   *\n   * @param {Object} config - configuration, see Configuration.initTracer\n   * @param {Object} options - options, see Configuration.initTracer\n   */\n  static initTracer(config = {}, options = {}) {\n    config.disable = config.disable || process.env.JAEGER_DISABLE === 'true';\n    config.serviceName = config.serviceName || process.env.JAEGER_SERVICE_NAME;\n\n    options.tags = ConfigurationEnv._parseTagsFromEnv(options);\n    let samplerConfig = ConfigurationEnv._getSamplerFromEnv(config);\n    if (Object.keys(samplerConfig).length > 0) {\n      config.sampler = samplerConfig;\n    }\n\n    if (!options.reporter) {\n      let reporterConfig = ConfigurationEnv._getReporterFromEnv(config, options);\n      if (Object.keys(reporterConfig).length > 0) {\n        config.reporter = reporterConfig;\n      }\n    }\n    return Configuration.initTracer(config, options);\n  }\n}\n"]}