{"version":3,"sources":["../../../src/propagators/text_map_codec.js"],"names":["constants","TextMapCodec","options","_urlEncoding","urlEncoding","_contextKey","contextKey","TRACER_STATE_HEADER_NAME","toLowerCase","_baggagePrefix","baggagePrefix","TRACER_BAGGAGE_HEADER_PREFIX","_metrics","metrics","value","encodeURIComponent","indexOf","_decodeURIValue","decodeURIComponent","e","carrier","spanContext","baggage","debugId","key","hasOwnProperty","lowerKey","decodedContext","fromString","_decodeValue","decodingErrors","increment","JAEGER_DEBUG_HEADER","JAEGER_BAGGAGE_HEADER","startsWith","keyWithoutPrefix","substring","length","stringSpanContext","toString","_encodeValue"],"mappings":"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","file":"text_map_codec.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from '../constants.js';\nimport Metrics from '../metrics/metrics.js';\nimport NoopMetricFactory from '../metrics/noop/metric_factory';\nimport SpanContext from '../span_context.js';\nimport Utils from '../util.js';\nimport { parseCommaSeparatedBaggage } from '../propagators/baggage';\n\nexport default class TextMapCodec {\n  _urlEncoding: boolean;\n  _contextKey: string;\n  _baggagePrefix: string;\n  _metrics: any;\n\n  constructor(options: any = {}) {\n    this._urlEncoding = !!options.urlEncoding;\n    this._contextKey = options.contextKey || constants.TRACER_STATE_HEADER_NAME;\n    this._contextKey = this._contextKey.toLowerCase();\n    this._baggagePrefix = options.baggagePrefix || constants.TRACER_BAGGAGE_HEADER_PREFIX;\n    this._baggagePrefix = this._baggagePrefix.toLowerCase();\n    this._metrics = options.metrics || new Metrics(new NoopMetricFactory());\n  }\n\n  _encodeValue(value: string): string {\n    if (this._urlEncoding) {\n      return encodeURIComponent(value);\n    }\n\n    return value;\n  }\n\n  _decodeValue(value: string): string {\n    // only use url-decoding if there are meta-characters '%'\n    if (this._urlEncoding && value.indexOf('%') > -1) {\n      return this._decodeURIValue(value);\n    }\n\n    return value;\n  }\n\n  _decodeURIValue(value: string): string {\n    // unfortunately, decodeURIComponent() can throw 'URIError: URI malformed' on bad strings\n    try {\n      return decodeURIComponent(value);\n    } catch (e) {\n      return value;\n    }\n  }\n\n  extract(carrier: any): ?SpanContext {\n    let spanContext = new SpanContext();\n    let baggage = {};\n    let debugId = '';\n\n    for (let key in carrier) {\n      if (carrier.hasOwnProperty(key)) {\n        let lowerKey = key.toLowerCase();\n        if (lowerKey === this._contextKey) {\n          let decodedContext = SpanContext.fromString(this._decodeValue(carrier[key]));\n          if (decodedContext === null) {\n            this._metrics.decodingErrors.increment(1);\n          } else {\n            spanContext = decodedContext;\n          }\n        } else if (lowerKey === constants.JAEGER_DEBUG_HEADER) {\n          debugId = this._decodeValue(carrier[key]);\n        } else if (lowerKey === constants.JAEGER_BAGGAGE_HEADER) {\n          parseCommaSeparatedBaggage(baggage, this._decodeValue(carrier[key]));\n        } else if (Utils.startsWith(lowerKey, this._baggagePrefix)) {\n          let keyWithoutPrefix = key.substring(this._baggagePrefix.length);\n          baggage[keyWithoutPrefix] = this._decodeValue(carrier[key]);\n        }\n      }\n    }\n\n    spanContext.debugId = debugId;\n    spanContext.baggage = baggage;\n    return spanContext;\n  }\n\n  inject(spanContext: SpanContext, carrier: any): void {\n    let stringSpanContext = spanContext.toString();\n    carrier[this._contextKey] = stringSpanContext; // no need to encode this\n\n    let baggage = spanContext.baggage;\n    for (let key in baggage) {\n      if (baggage.hasOwnProperty(key)) {\n        let value = this._encodeValue(spanContext.baggage[key]);\n        carrier[`${this._baggagePrefix}${key}`] = value;\n      }\n    }\n  }\n}\n"]}