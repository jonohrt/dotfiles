{"version":3,"sources":["../../../src/samplers/probabilistic_sampler.js"],"names":["constants","ProbabilisticSampler","samplingRate","Error","_samplingRate","name","operation","tags","decision","random","SAMPLER_TYPE_TAG_KEY","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_PARAM_TAG_KEY","Math","other","callback"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;;;;;IAESC,oB;AAGnB,gCAAYC,YAAZ,EAAkC;AAAA;;AAChC,QAAIA,eAAe,GAAf,IAAsBA,eAAe,GAAzC,EAA8C;AAC5C,YAAM,IAAIC,KAAJ,6EACsED,YADtE,CAAN;AAGD;;AAED,SAAKE,aAAL,GAAqBF,YAArB;AACD;;;;2BAEc;AACb,aAAO,sBAAP;AACD;;;+BAEkB;AACjB,aAAU,KAAKG,IAAL,EAAV,sBAAsC,KAAKD,aAA3C;AACD;;;8BAMSE,S,EAAmBC,I,EAAoB;AAC/C,UAAIC,WAAW,KAAKC,MAAL,KAAgB,KAAKL,aAApC;AACA,UAAII,QAAJ,EAAc;AACZD,aAAKP,UAAUU,oBAAf,IAAuCV,UAAUW,0BAAjD;AACAJ,aAAKP,UAAUY,qBAAf,IAAwC,KAAKR,aAA7C;AACD;AACD,aAAOI,QAAP;AACD;;;6BAEgB;AACf,aAAOK,KAAKJ,MAAL,EAAP;AACD;;;0BAEKK,K,EAAyB;AAC7B,UAAI,EAAEA,iBAAiBb,oBAAnB,CAAJ,EAA8C;AAC5C,eAAO,KAAP;AACD;;AAED,aAAO,KAAKC,YAAL,KAAsBY,MAAMZ,YAAnC;AACD;;;0BAEKa,Q,EAA2B;AAC/B,UAAIA,QAAJ,EAAc;AACZA;AACD;AACF;;;wBA7B0B;AACzB,aAAO,KAAKX,aAAZ;AACD;;;;;;kBAvBkBH,oB","file":"probabilistic_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from '../constants.js';\n\nexport default class ProbabilisticSampler {\n  _samplingRate: number;\n\n  constructor(samplingRate: number) {\n    if (samplingRate < 0.0 || samplingRate > 1.0) {\n      throw new Error(\n        `The sampling rate must be less than 0.0 and greater than 1.0. Received ${samplingRate}`\n      );\n    }\n\n    this._samplingRate = samplingRate;\n  }\n\n  name(): string {\n    return 'ProbabilisticSampler';\n  }\n\n  toString(): string {\n    return `${this.name()}(samplingRate=${this._samplingRate})`;\n  }\n\n  get samplingRate(): number {\n    return this._samplingRate;\n  }\n\n  isSampled(operation: string, tags: any): boolean {\n    let decision = this.random() < this._samplingRate;\n    if (decision) {\n      tags[constants.SAMPLER_TYPE_TAG_KEY] = constants.SAMPLER_TYPE_PROBABILISTIC;\n      tags[constants.SAMPLER_PARAM_TAG_KEY] = this._samplingRate;\n    }\n    return decision;\n  }\n\n  random(): number {\n    return Math.random();\n  }\n\n  equal(other: Sampler): boolean {\n    if (!(other instanceof ProbabilisticSampler)) {\n      return false;\n    }\n\n    return this.samplingRate === other.samplingRate;\n  }\n\n  close(callback: ?Function): void {\n    if (callback) {\n      callback();\n    }\n  }\n}\n"]}