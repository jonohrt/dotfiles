{"version":3,"sources":["../../../src/reporters/http_sender.js"],"names":["URL","DEFAULT_PATH","DEFAULT_PORT","DEFAULT_TIMEOUT_MS","DEFAULT_MAX_SPAN_BATCH_SIZE","HTTPSender","options","_url","parse","endpoint","_username","username","_password","password","_timeoutMS","timeoutMS","_httpAgent","protocol","Agent","keepAlive","_maxSpanBatchSize","maxSpanBatchSize","_logger","logger","_jaegerThrift","source","readFileSync","join","__dirname","allowOptionalArguments","_httpOptions","hostname","port","path","pathname","method","auth","undefined","headers","Connection","agent","timeout","process","_batch","Batch","convertProcessToThrift","spans","span","callback","push","Span","length","flush","invokeCallback","numSpans","result","rw","toBuffer","err","_reset","requester","request","req","on","error","write","value","end","destroy"],"mappings":"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","file":"http_sender.js","sourcesContent":["// @flow\n// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport fs from 'fs';\nimport http from 'http';\nimport https from 'https';\nimport path from 'path';\nimport * as URL from 'url';\nimport { Thrift } from 'thriftrw';\n\nimport NullLogger from '../logger.js';\nimport SenderUtils from './sender_utils.js';\n\nconst DEFAULT_PATH = '/api/traces';\nconst DEFAULT_PORT = 14268;\nconst DEFAULT_TIMEOUT_MS = 5000;\nconst DEFAULT_MAX_SPAN_BATCH_SIZE = 100;\n\nexport default class HTTPSender {\n  _url: Object;\n  _username: string;\n  _password: string;\n  _emitSpanBatchOverhead: number;\n  _timeoutMS: number;\n  _httpAgent: http$Agent;\n  _logger: Logger;\n  _jaegerThrift: Thrift;\n  _process: Process;\n  _batch: Batch;\n  _thriftProcessMessage: any;\n  _maxSpanBatchSize: number;\n  _httpOptions: Object;\n\n  constructor(options: any = {}) {\n    this._url = URL.parse(options.endpoint);\n    this._username = options.username;\n    this._password = options.password;\n    this._timeoutMS = options.timeoutMS || DEFAULT_TIMEOUT_MS;\n    this._httpAgent =\n      this._url.protocol === 'https:'\n        ? new https.Agent({ keepAlive: true })\n        : new http.Agent({ keepAlive: true });\n\n    this._maxSpanBatchSize = options.maxSpanBatchSize || DEFAULT_MAX_SPAN_BATCH_SIZE;\n\n    this._logger = options.logger || new NullLogger();\n    this._jaegerThrift = new Thrift({\n      source: fs.readFileSync(path.join(__dirname, '../jaeger-idl/thrift/jaeger.thrift'), 'ascii'),\n      allowOptionalArguments: true,\n    });\n\n    this._httpOptions = {\n      protocol: this._url.protocol,\n      hostname: this._url.hostname,\n      port: this._url.port,\n      path: this._url.pathname,\n      method: 'POST',\n      auth: this._username && this._password ? `${this._username}:${this._password}` : undefined,\n      headers: {\n        'Content-Type': 'application/x-thrift',\n        Connection: 'keep-alive',\n      },\n      agent: this._httpAgent,\n      timeout: this._timeoutMS,\n    };\n  }\n\n  setProcess(process: Process): void {\n    // Go ahead and initialize the Thrift batch that we will reuse for each\n    // flush.\n    this._batch = new this._jaegerThrift.Batch({\n      process: SenderUtils.convertProcessToThrift(this._jaegerThrift, process),\n      spans: [],\n    });\n  }\n\n  append(span: any, callback?: SenderCallback): void {\n    this._batch.spans.push(new this._jaegerThrift.Span(span));\n\n    if (this._batch.spans.length >= this._maxSpanBatchSize) {\n      this.flush(callback);\n      return;\n    }\n    SenderUtils.invokeCallback(callback, 0);\n  }\n\n  flush(callback?: SenderCallback): void {\n    const numSpans = this._batch.spans.length;\n    if (!numSpans) {\n      SenderUtils.invokeCallback(callback, 0);\n      return;\n    }\n\n    const result = this._jaegerThrift.Batch.rw.toBuffer(this._batch);\n    if (result.err) {\n      SenderUtils.invokeCallback(callback, numSpans, `Error encoding Thrift batch: ${result.err}`);\n      return;\n    }\n\n    this._reset();\n\n    const requester = this._url.protocol === 'https:' ? https.request : http.request;\n\n    const req = requester(this._httpOptions, resp => {\n      SenderUtils.invokeCallback(callback, numSpans);\n    });\n\n    req.on('error', err => {\n      const error: string = `error sending spans over HTTP: ${err}`;\n      this._logger.error(error);\n      SenderUtils.invokeCallback(callback, numSpans, error);\n    });\n    req.write(result.value);\n    req.end();\n  }\n\n  _reset() {\n    this._batch.spans = [];\n  }\n\n  close(): void {\n    // Older node versions don't have this.\n    if (this._httpAgent.destroy) {\n      this._httpAgent.destroy();\n    }\n  }\n}\n"]}