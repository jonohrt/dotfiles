{"version":3,"sources":["../../../src/reporters/composite_reporter.js"],"names":["CompositeReporter","reporters","_reporters","span","forEach","r","report","limit","callback","count","modifiedCallback","_compositeCallback","length","close","serviceName","tags","setProcess"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;IAEqBA,iB;AAGnB,6BAAYC,SAAZ,EAAwC;AAAA;;AACtC,SAAKC,UAAL,GAAkBD,SAAlB;AACD;;;;2BAEc;AACb,aAAO,mBAAP;AACD;;;2BAEME,I,EAAkB;AACvB,WAAKD,UAAL,CAAgBE,OAAhB,CAAwB,aAAK;AAC3BC,UAAEC,MAAF,CAASH,IAAT;AACD,OAFD;AAGD;;;uCAEkBI,K,EAAeC,Q,EAAkC;AAClE,UAAIC,QAAQ,CAAZ;AACA,aAAO,YAAM;AACXA;AACA,YAAIA,SAASF,KAAb,EAAoB;AAClBC;AACD;AACF,OALD;AAMD;;;0BAEKA,Q,EAA6B;AACjC,UAAME,mBAAmBF,WACrB,KAAKG,kBAAL,CAAwB,KAAKT,UAAL,CAAgBU,MAAxC,EAAgDJ,QAAhD,CADqB,GAErB,YAAW,CAAE,CAFjB;AAGA,WAAKN,UAAL,CAAgBE,OAAhB,CAAwB,aAAK;AAC3BC,UAAEQ,KAAF,CAAQH,gBAAR;AACD,OAFD;AAGD;;;+BAEUI,W,EAAqBC,I,EAAwB;AACtD,WAAKb,UAAL,CAAgBE,OAAhB,CAAwB,aAAK;AAC3B,YAAIC,EAAEW,UAAN,EAAkB;AAChBX,YAAEW,UAAF,CAAaF,WAAb,EAA0BC,IAA1B;AACD;AACF,OAJD;AAKD;;;;;;kBA1CkBf,iB","file":"composite_reporter.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport Span from '../span.js';\n\nexport default class CompositeReporter {\n  _reporters: Array<Reporter>;\n\n  constructor(reporters: Array<Reporter>) {\n    this._reporters = reporters;\n  }\n\n  name(): string {\n    return 'CompositeReporter';\n  }\n\n  report(span: Span): void {\n    this._reporters.forEach(r => {\n      r.report(span);\n    });\n  }\n\n  _compositeCallback(limit: number, callback: () => void): () => void {\n    let count = 0;\n    return () => {\n      count++;\n      if (count >= limit) {\n        callback();\n      }\n    };\n  }\n\n  close(callback?: () => void): void {\n    const modifiedCallback = callback\n      ? this._compositeCallback(this._reporters.length, callback)\n      : function() {};\n    this._reporters.forEach(r => {\n      r.close(modifiedCallback);\n    });\n  }\n\n  setProcess(serviceName: string, tags: Array<Tag>): void {\n    this._reporters.forEach(r => {\n      if (r.setProcess) {\n        r.setProcess(serviceName, tags);\n      }\n    });\n  }\n}\n"]}