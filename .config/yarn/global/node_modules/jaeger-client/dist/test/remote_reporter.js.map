{"version":3,"sources":["../../test/remote_reporter.js"],"names":["describe","tracer","reporter","sender","logger","metrics","beforeEach","e","console","log","stack","afterEach","clear","callback","close","it","span","startSpan","finish","equal","_batch","spans","length","flush","isOk","counterEquals","reporterSuccess","done","setProcess","serviceName","tags","name","to","throw","mockSender","_sender","_errorMsgs","have","string","reporterFailure"],"mappings":"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","file":"remote_reporter.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter';\nimport MockLogger from './lib/mock_logger';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport Tracer from '../src/tracer';\nimport UDPSender from '../src/reporters/udp_sender';\nimport Metrics from '../src/metrics/metrics';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory';\nimport LocalBackend from './lib/metrics/local/backend';\n\ndescribe('Remote Reporter', () => {\n  let tracer;\n  let reporter;\n  let sender;\n  let logger;\n  let metrics;\n\n  beforeEach(() => {\n    try {\n      metrics = new Metrics(new LocalMetricFactory());\n      sender = new UDPSender();\n      logger = new MockLogger();\n      reporter = new RemoteReporter(sender, {\n        logger: logger,\n        metrics: metrics,\n      });\n      tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    } catch (e) {\n      // this is useful to catch errors when thrift definition is changed\n      console.log('beforeEach failed', e);\n      console.log(e.stack);\n    }\n  });\n\n  afterEach(() => {\n    logger.clear();\n    let callback = () => {}; // added for coverage reasons\n    reporter.close(callback);\n  });\n\n  it('should report span, and flush', done => {\n    let span = tracer.startSpan('operation-name');\n\n    // add duration to span, and report it\n    span.finish();\n    assert.equal(sender._batch.spans.length, 1);\n\n    reporter.flush(() => {\n      assert.equal(sender._batch.spans.length, 0);\n      assert.isOk(LocalBackend.counterEquals(metrics.reporterSuccess, 1));\n      done();\n    });\n  });\n\n  it('should have coverage for simple code paths', () => {\n    let sender = new UDPSender();\n    sender.setProcess({\n      serviceName: 'service-name',\n      tags: [],\n    });\n    let reporter = new RemoteReporter(sender);\n\n    assert.equal(reporter.name(), 'RemoteReporter');\n\n    reporter.close();\n  });\n\n  it('should throw exception when initialized without a sender', () => {\n    expect(() => {\n      new RemoteReporter();\n    }).to.throw('RemoteReporter must be given a Sender.');\n  });\n\n  it('should fail to flush spans with bad sender', done => {\n    let mockSender = {\n      flush: callback => {\n        callback(1, 'mock error');\n      },\n      close: () => {},\n    };\n\n    reporter._sender = mockSender;\n    reporter.flush(() => {\n      expect(logger._errorMsgs[0]).to.have.string('Failed to flush spans in reporter');\n      assert.isOk(LocalBackend.counterEquals(metrics.reporterFailure, 1));\n      done();\n    });\n  });\n\n  it('should not flush if process is not set', done => {\n    reporter = new RemoteReporter(sender, {\n      logger: logger,\n    });\n    reporter.flush(() => {\n      expect(logger._errorMsgs[0]).to.have.string('Failed to flush since process is not set');\n      done();\n    });\n  });\n});\n"]}