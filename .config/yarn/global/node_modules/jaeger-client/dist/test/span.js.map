{"version":3,"sources":["../../test/span.js"],"names":["constants","opentracing","describe","reporter","tracer","span","spanContext","beforeEach","logger","withBinaryIds","encodeInt64","SAMPLED_MASK","now","it","equal","context","setOperationName","operationName","initialDate","Date","getTime","_startTime","expectedDuration","finishDate","finish","_duration","spans","length","spanInfo","toString","_logger","_errorMsgs","_setSamplingPriority","isOk","isDebug","isSampled","isNotOk","keyValuePairs","numberTag","stringTag","booleanTag","addTags","count","i","_tags","key","timestamp","event","log","_logs","fields","value","payload","a","JSON","stringify","expectedTimestamp","clock","useFakeTimers","restore","spy","_baggageSetter","setBaggageItem","getBaggageItem","calledOnce","calledWith","child","startSpan","childOf","unnormalizedKey","_normalizeBaggageKey","_getBaggageHeaderCache","_debugThrottler","prevTagLength","setTag","Tags","SAMPLING_PRIORITY","samplingFinalized","tags","isAllowedSpy","deepEqual","assert","options","desc","sampling","reportedSpans","each","o","tagKeyTwo","logkeyOne","_sampler","childSpan","unsampledSpan","headers","inject","FORMAT_HTTP_HEADERS","unFinalizedSpan","_isWriteable","sampledSpan","hasTags","newSpan","isEqual"],"mappings":";;AAYA;;;;AACA;;AACA;;;;AACA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;AACA;;IAAYC,W;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAC,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAIC,WAAW,kCAAf;AACA,MAAIC,eAAJ;AAAA,MAAYC,aAAZ;AAAA,MAAkBC,oBAAlB;;AAEAC,aAAW,YAAM;AACfH,aAAS,qBAAW,mBAAX,EAAgCD,QAAhC,EAA0C,4BAAiB,IAAjB,CAA1C,EAAkE,EAAEK,QAAQ,2BAAV,EAAlE,CAAT;;AAEAF,kBAAc,uBAAYG,aAAZ,CACZ,eAAMC,WAAN,CAAkB,CAAlB,CADY,EAEZ,eAAMA,WAAN,CAAkB,CAAlB,CAFY,EAGZ,eAAMA,WAAN,CAAkB,CAAlB,CAHY,EAIZV,UAAUW,YAJE,CAAd;;AAOAN,WAAO,mBAASD,MAAT,EAAiB,SAAjB,EAA4BE,WAA5B,EAAyCF,OAAOQ,GAAP,EAAzC,CAAP;AACD,GAXD;;AAaAC,KAAG,8CAAH,EAAmD,YAAM;AACvD,iBAAOC,KAAP,CAAaT,KAAKU,OAAL,EAAb,EAA6BT,WAA7B;AACD,GAFD;;AAIAO,KAAG,uCAAH,EAA4C,YAAM;AAChD,iBAAOC,KAAP,CAAaT,KAAKD,MAAL,EAAb,EAA4BA,MAA5B;AACD,GAFD;;AAIAS,KAAG,8BAAH,EAAmC,YAAM;AACvCR,SAAKW,gBAAL,CAAsB,gBAAtB;AACA,iBAAOF,KAAP,CAAaT,KAAKY,aAAlB,EAAiC,gBAAjC;AACD,GAHD;;AAKAJ,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAIK,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,EAAlB;AACAf,SAAKgB,UAAL,GAAkBH,WAAlB;AACA,QAAII,mBAAmB,IAAvB;AACA,QAAIC,aAAaL,cAAcI,gBAA/B;;AAEAjB,SAAKmB,MAAL,CAAYD,UAAZ;;AAEA,iBAAOT,KAAP,CAAaT,KAAKoB,SAAlB,EAA6BH,gBAA7B;AACA,iBAAOR,KAAP,CAAaX,SAASuB,KAAT,CAAeC,MAA5B,EAAoC,CAApC;AACA,iBAAOb,KAAP,CAAaX,SAASuB,KAAT,CAAe,CAAf,CAAb,EAAgCrB,IAAhC;AACD,GAXD;;AAaAQ,KAAG,8BAAH,EAAmC,YAAM;AACvCR,SAAKmB,MAAL;AACAnB,SAAKmB,MAAL;AACA,QAAII,0BAAwBvB,KAAKY,aAA7B,iBAAsDZ,KAAKU,OAAL,GAAec,QAAf,EAA1D;AACA,iBAAOf,KAAP,CAAaV,OAAO0B,OAAP,CAAeC,UAAf,CAA0B,CAA1B,CAAb,EAA8CH,QAA9C;AACD,GALD;;AAOAf,KAAG,0DAAH,EAA+D,YAAM;AACnER,SAAK2B,oBAAL,CAA0B,CAA1B;;AAEA,iBAAOC,IAAP,CAAY5B,KAAKU,OAAL,GAAemB,OAAf,EAAZ;AACA,iBAAOD,IAAP,CAAY5B,KAAKU,OAAL,GAAeoB,SAAf,EAAZ;AACD,GALD;;AAOAtB,KAAG,wBAAH,EAA6B,YAAM;AACjCR,SAAK2B,oBAAL,CAA0B,CAA1B;;AAEA,iBAAOI,OAAP,CAAe/B,KAAKU,OAAL,GAAeoB,SAAf,EAAf;AACD,GAJD;;AAMAtB,KAAG,UAAH,EAAe,YAAM;AACnB,QAAIwB,gBAAgB;AAClBC,iBAAW,CADO;AAElBC,iBAAW,QAFO;AAGlBC,kBAAY;AAHM,KAApB;AAKAnC,SAAKoC,OAAL,CAAaJ,aAAb;AACAhC,SAAKoC,OAAL,CAAa,EAAEH,WAAW,CAAb,EAAb;;AAEA;AACA;AACA,QAAII,QAAQ,CAAZ;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAItC,KAAKuC,KAAL,CAAWjB,MAA/B,EAAuCgB,GAAvC,EAA4C;AAC1C,UAAItC,KAAKuC,KAAL,CAAWD,CAAX,EAAcE,GAAd,KAAsB,WAA1B,EAAuC;AACrCH,iBAAS,CAAT;AACD;AACF;;AAED,iBAAOT,IAAP,CAAY5B,KAAKuC,KAAL,CAAWjB,MAAvB,EAA+B,CAA/B;AACA,iBAAOb,KAAP,CAAa4B,KAAb,EAAoB,CAApB;AACD,GApBD;;AAsBA7B,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAIiC,YAAY,IAAI3B,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsBC,OAAtB,EAAhB;AACA,QAAI2B,QAAQ,cAAZ;AACA1C,SAAK2C,GAAL,CAAS,EAAED,OAAOA,KAAT,EAAT,EAA2BD,SAA3B;;AAEA,iBAAOhC,KAAP,CAAaT,KAAK4C,KAAL,CAAWtB,MAAxB,EAAgC,CAAhC;AACA,iBAAOb,KAAP,CAAaT,KAAK4C,KAAL,CAAW,CAAX,EAAcH,SAA3B,EAAsCA,SAAtC;AACA,iBAAOhC,KAAP,CAAaT,KAAK4C,KAAL,CAAW,CAAX,EAAcC,MAAd,CAAqB,CAArB,EAAwBC,KAArC,EAA4CJ,KAA5C;AACD,GARD;;AAUAlC,KAAG,uBAAH,EAA4B,YAAM;AAChC,QAAIuC,UAAU,EAAEC,GAAG,CAAL,EAAd;AACAhD,SAAK2C,GAAL,CAAS,EAAEI,gBAAF,EAAT;;AAEA,iBAAOtC,KAAP,CAAaT,KAAK4C,KAAL,CAAWtB,MAAxB,EAAgC,CAAhC;AACA,iBAAOb,KAAP,CAAawC,KAAKC,SAAL,CAAelD,KAAK4C,KAAL,CAAW,CAAX,EAAcC,MAAd,CAAqB,CAArB,EAAwBC,KAAvC,CAAb,EAA4DG,KAAKC,SAAL,CAAeH,OAAf,CAA5D;AACD,GAND;;AAQAvC,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAI2C,oBAAoB,OAAxB;AACA;AACA,QAAIC,QAAQ,gBAAMC,aAAN,CAAoBF,iBAApB,CAAZ;AACA,QAAIT,QAAQ,cAAZ;AACA1C,SAAK2C,GAAL,CAAS,EAAED,YAAF,EAAT;;AAEA,iBAAOjC,KAAP,CAAaT,KAAK4C,KAAL,CAAWtB,MAAxB,EAAgC,CAAhC;AACA,iBAAOb,KAAP,CAAaT,KAAK4C,KAAL,CAAW,CAAX,EAAcH,SAA3B,EAAsCU,iBAAtC;AACA,iBAAO1C,KAAP,CAAaT,KAAK4C,KAAL,CAAW,CAAX,EAAcC,MAAd,CAAqB,CAArB,EAAwBC,KAArC,EAA4CJ,KAA5C;AACAU,UAAME,OAAN;AACD,GAXD;;AAaA9C,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAIgC,MAAM,UAAV;AACA,QAAIM,QAAQ,YAAZ;;AAEA,QAAIS,MAAM,gBAAMA,GAAN,CAAUvD,KAAKwD,cAAf,EAA+B,YAA/B,CAAV;AACAxD,SAAKyD,cAAL,CAAoBjB,GAApB,EAAyBM,KAAzB;AACA,iBAAOrC,KAAP,CAAaqC,KAAb,EAAoB9C,KAAK0D,cAAL,CAAoBlB,GAApB,CAApB;AACA,sBAAOe,IAAII,UAAX;AACA,sBAAOJ,IAAIK,UAAJ,CAAe5D,IAAf,EAAqBwC,GAArB,EAA0BM,KAA1B,CAAP;AACD,GATD;;AAWAtC,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAIgC,MAAM,UAAV;AACA,QAAIM,QAAQ,YAAZ;;AAEA9C,SAAKyD,cAAL,CAAoBjB,GAApB,EAAyBM,KAAzB;AACA,QAAIe,QAAQ9D,OAAO+D,SAAP,CAAiB,OAAjB,EAA0B,EAAEC,SAAS/D,KAAKU,OAAL,EAAX,EAA1B,CAAZ;AACA,iBAAOD,KAAP,CAAaqC,KAAb,EAAoBe,MAAMH,cAAN,CAAqBlB,GAArB,CAApB;AACD,GAPD;;AASAhC,KAAG,0BAAH,EAA+B,YAAM;AACnC,QAAIwD,kBAAkB,UAAtB;AACA,QAAIxB,MAAMxC,KAAKiE,oBAAL,CAA0BD,eAA1B,CAAV;;AAEA,iBAAOvD,KAAP,CAAa+B,GAAb,EAAkB,UAAlB;AACA,iBAAOZ,IAAP,CAAYoC,mBAAmB,eAAKE,sBAAL,EAA/B;AACD,GAND;;AAQA1D,KAAG,6CAAH,EAAkD,YAAM;AACtDT,WAAOoE,eAAP,GAAyB,gCAAqB,IAArB,CAAzB;AACAnE,WAAO,mBAASD,MAAT,EAAiB,SAAjB,EAA4BE,WAA5B,EAAyCF,OAAOQ,GAAP,EAAzC,CAAP;;AAEA,QAAM6D,gBAAgBpE,KAAKuC,KAAL,CAAWjB,MAAjC;AACAtB,SAAKqE,MAAL,CAAYzE,YAAY0E,IAAZ,CAAiBC,iBAA7B,EAAgD,CAAhD;AACA,iBAAO3C,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACA,iBAAOzC,OAAP,CAAe/B,KAAKU,OAAL,GAAemB,OAAf,EAAf;AACA,iBAAOpB,KAAP,CACE2D,aADF,EAEEpE,KAAKuC,KAAL,CAAWjB,MAFb,EAGE,0DAHF;AAKD,GAbD;;AAeAd,KAAG,8CAAH,EAAmD,YAAM;AACvDT,WAAOoE,eAAP,GAAyB,gCAAqB,IAArB,CAAzB;AACAnE,WAAO,mBAASD,MAAT,EAAiB,SAAjB,EAA4BE,WAA5B,EAAyCF,OAAOQ,GAAP,EAAzC,CAAP;;AAEA,QAAM6D,gBAAgBpE,KAAKuC,KAAL,CAAWjB,MAAjC;AACA,QAAMmD,OAAO,EAAb;AACAA,SAAK7E,YAAY0E,IAAZ,CAAiBC,iBAAtB,IAA2C,CAA3C;AACAvE,SAAKoC,OAAL,CAAaqC,IAAb;AACA,iBAAO7C,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACA,iBAAOzC,OAAP,CAAe/B,KAAKU,OAAL,GAAemB,OAAf,EAAf;AACA,iBAAOpB,KAAP,CACE2D,aADF,EAEEpE,KAAKuC,KAAL,CAAWjB,MAFb,EAGE,0DAHF;AAKD,GAfD;;AAiBAd,KAAG,uDAAH,EAA4D,YAAM;AAChET,WAAOoE,eAAP,GAAyB,iCAAzB;AACA,QAAMO,eAAe,gBAAMnB,GAAN,CAAUxD,OAAOoE,eAAjB,EAAkC,WAAlC,CAArB;AACAnE,WAAO,mBAASD,MAAT,EAAiB,SAAjB,EAA4BE,WAA5B,EAAyCF,OAAOQ,GAAP,EAAzC,CAAP;;AAEAP,SAAKqE,MAAL,CAAYzE,YAAY0E,IAAZ,CAAiBC,iBAA7B,EAAgD,CAAhD;AACA,iBAAO3C,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACA,iBAAO5C,IAAP,CAAY5B,KAAKU,OAAL,GAAemB,OAAf,EAAZ;AACA,iBAAO8C,SAAP,CAAiB3E,KAAKuC,KAAL,CAAWvC,KAAKuC,KAAL,CAAWjB,MAAX,GAAoB,CAA/B,CAAjB,EAAoD,EAAEkB,KAAK,mBAAP,EAA4BM,OAAO,CAAnC,EAApD;;AAEA,QAAMsB,gBAAgBpE,KAAKuC,KAAL,CAAWjB,MAAjC;AACAtB,SAAKqE,MAAL,CAAYzE,YAAY0E,IAAZ,CAAiBC,iBAA7B,EAAgD,CAAhD;AACA;AACA,oBAAMK,MAAN,CAAajB,UAAb,CAAwBe,YAAxB;AACA,iBAAOjE,KAAP,CAAa2D,aAAb,EAA4BpE,KAAKuC,KAAL,CAAWjB,MAAvC,EAA+C,mDAA/C;AACD,GAfD;;AAiBAzB,WAAS,kCAAT,EAA6C,YAAM;AACjD,QAAIgF,UAAU,CACZ,EAAEC,MAAM,WAAR,EAAqBC,UAAU,IAA/B,EAAqCC,eAAe,CAApD,EADY,EAEZ,EAAEF,MAAM,aAAR,EAAuBC,UAAU,KAAjC,EAAwCC,eAAe,CAAvD,EAFY,CAAd;AAIA,qBAAEC,IAAF,CAAOJ,OAAP,EAAgB,aAAK;AACnBrE,SAAG0E,EAAEJ,IAAF,GAAS,iFAAZ,EAA+F,YAAM;AACnG,YAAIhF,WAAW,kCAAf;AACA,YAAIC,SAAS,qBAAW,mBAAX,EAAgCD,QAAhC,EAA0C,4BAAiB,KAAjB,CAA1C,EAAmE;AAC9EK,kBAAQ;AADsE,SAAnE,CAAb;AAGA,YAAIH,OAAOD,OAAO+D,SAAP,CAAiB,0BAAjB,CAAX;AACA9D,aAAKqE,MAAL,CAAY,WAAZ,EAAyB,aAAzB;AACArE,aAAKoC,OAAL,CAAa;AACX+C,qBAAW;AADA,SAAb;AAGAnF,aAAK2C,GAAL,CAAS,EAAEyC,WAAW,aAAb,EAAT;;AAEArF,eAAOsF,QAAP,GAAkB,4BAAiBH,EAAEH,QAAnB,CAAlB;AACA/E,aAAKW,gBAAL,CAAsB,cAAtB;AACAX,aAAKmB,MAAL;;AAEA,qBAAOwD,SAAP,CAAiB3E,KAAKuC,KAAL,CAAW,CAAX,CAAjB,EAAgC,EAAEC,KAAK,WAAP,EAAoBM,OAAO,aAA3B,EAAhC;AACA,qBAAO6B,SAAP,CAAiB3E,KAAKuC,KAAL,CAAW,CAAX,CAAjB,EAAgC,EAAEC,KAAK,WAAP,EAAoBM,OAAO,aAA3B,EAAhC;AACA,qBAAO6B,SAAP,CAAiB3E,KAAK4C,KAAL,CAAW,CAAX,EAAcC,MAAd,CAAqB,CAArB,CAAjB,EAA0C,EAAEL,KAAK,WAAP,EAAoBM,OAAO,aAA3B,EAA1C;AACA,qBAAOrC,KAAP,CAAaX,SAASuB,KAAT,CAAeC,MAA5B,EAAoC4D,EAAEF,aAAtC;AACD,OApBD;AAqBD,KAtBD;;AAwBAnF,aAAS,yBAAT,EAAoC,YAAM;AACxCW,SAAG,qDAAH,EAA0D,YAAM;AAC9D,qBAAOC,KAAP,CAAaT,KAAKU,OAAL,GAAe8D,iBAA5B,EAA+C,KAA/C,EAAsD,8CAAtD;;AAEA,YAAIc,YAAYvF,OAAO+D,SAAP,CAAiB,YAAjB,EAA+B,EAAEC,SAAS/D,IAAX,EAA/B,CAAhB;AACA,qBAAO4B,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACA,qBAAO5C,IAAP,CAAY0D,UAAU5E,OAAV,GAAoB8D,iBAAhC;AACD,OAND;;AAQAhE,SAAG,mDAAH,EAAwD,YAAM;AAC5D;AACA,qBAAOC,KAAP,CAAaT,KAAKU,OAAL,GAAe8D,iBAA5B,EAA+C,KAA/C;;AAEAxE,aAAKqE,MAAL,CAAYzE,YAAY0E,IAAZ,CAAiBC,iBAA7B,EAAgD,CAAhD;AACA,qBAAO3C,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACA,qBAAOG,SAAP,CAAiB3E,KAAKuC,KAAL,CAAWvC,KAAKuC,KAAL,CAAWjB,MAAX,GAAoB,CAA/B,CAAjB,EAAoD,EAAEkB,KAAK,mBAAP,EAA4BM,OAAO,CAAnC,EAApD;;AAEA,YAAMyC,gBAAgBxF,OAAO+D,SAAP,CAAiB,gBAAjB,CAAtB;AACA,YAAMM,gBAAgBpE,KAAKuC,KAAL,CAAWjB,MAAjC;AACAiE,sBAAclB,MAAd,CAAqBzE,YAAY0E,IAAZ,CAAiBC,iBAAtC,EAAyD,CAAC,CAA1D;AACA,qBAAO3C,IAAP,CAAY2D,cAAc7E,OAAd,GAAwB8D,iBAApC;AACA,qBAAO/D,KAAP,CACE2D,aADF,EAEEpE,KAAKuC,KAAL,CAAWjB,MAFb,EAGE,kFAHF;AAKD,OAjBD;;AAmBAd,SAAG,sCAAH,EAA2C,YAAM;AAC/C;AACA,qBAAOC,KAAP,CAAaT,KAAKU,OAAL,GAAe8D,iBAA5B,EAA+C,KAA/C;;AAEAxE,aAAKmB,MAAL;AACA,qBAAOS,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACD,OAND;;AAQAhE,SAAG,+CAAH,EAAoD,YAAM;AACxD;AACA,qBAAOC,KAAP,CAAaT,KAAKU,OAAL,GAAe8D,iBAA5B,EAA+C,KAA/C;;AAEAxE,aAAKW,gBAAL,CAAsB,KAAtB;AACA,qBAAOiB,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACD,OAND;;AAQAhE,SAAG,0DAAH,EAA+D,YAAM;AACnE;AACA,qBAAOC,KAAP,CAAaT,KAAKU,OAAL,GAAe8D,iBAA5B,EAA+C,KAA/C;;AAEA,YAAIgB,UAAU,EAAd;AACAzF,eAAO0F,MAAP,CAAczF,KAAKU,OAAL,EAAd,EAA8Bd,YAAY8F,mBAA1C,EAA+DF,OAA/D;;AAEA,qBAAO5D,IAAP,CAAY5B,KAAKU,OAAL,GAAe8D,iBAA3B;AACD,OARD;AASD,KArDD;;AAuDAhE,OAAG,mEAAH,EAAwE,YAAM;AAC5ET,eAAS,qBAAW,mBAAX,EAAgC,kCAAhC,EAAwD,4BAAiB,KAAjB,CAAxD,EAAiF;AACxFI,gBAAQ;AADgF,OAAjF,CAAT;AAGA,UAAIwF,kBAAkB5F,OAAO+D,SAAP,CAAiB,iBAAjB,CAAtB;AACA,mBAAOrD,KAAP,CAAakF,gBAAgBjF,OAAhB,GAA0B8D,iBAAvC,EAA0D,KAA1D;AACA,mBAAO5C,IAAP,CAAY+D,gBAAgBC,YAAhB,EAAZ;;AAEA7F,aAAOsF,QAAP,GAAkB,4BAAiB,IAAjB,CAAlB;AACA,UAAIQ,cAAc9F,OAAO+D,SAAP,CAAiB,cAAjB,CAAlB;;AAEA+B,kBAAY1E,MAAZ,GAX4E,CAWtD;AACtB,mBAAOS,IAAP,CAAYiE,YAAYnF,OAAZ,GAAsB8D,iBAAlC;;AAEA,mBAAO5C,IAAP,CAAYiE,YAAYD,YAAZ,EAAZ;AACD,KAfD;;AAiBApF,OAAG,gFAAH,EAAqF,YAAM;AACzF,UAAIR,OAAOD,OAAO+D,SAAP,CAAiB,KAAjB,CAAX;;AAEA,mBAAOrD,KAAP,CAAaT,KAAKY,aAAlB,EAAiC,KAAjC;AACA,mBAAOgB,IAAP,CACE,oBAAgBkE,OAAhB,CAAwB9F,IAAxB,EAA8B;AAC5B,wBAAgB,OADY;AAE5B,yBAAiB;AAFW,OAA9B,CADF;AAMAD,aAAOsF,QAAP,GAAkB,oCAAyB,GAAzB,CAAlB;AACArF,WAAKW,gBAAL,CAAsB,iBAAtB;;AAEA,mBAAOF,KAAP,CAAaT,KAAKY,aAAlB,EAAiC,iBAAjC;AACA,mBAAOgB,IAAP,CACE,oBAAgBkE,OAAhB,CAAwB9F,IAAxB,EAA8B;AAC5B,wBAAgB,eADY;AAE5B,yBAAiB;AAFW,OAA9B,CADF;AAMD,KApBD;;AAsBAQ,OAAG,+FAAH,EAAoG,YAAM;AACxG,UAAIR,OAAOD,OAAO+D,SAAP,CAAiB,KAAjB,CAAX;;AAEA9D,WAAKW,gBAAL,CAAsB,cAAtB;AACA,mBAAOF,KAAP,CAAaT,KAAKY,aAAlB,EAAiC,cAAjC;;AAEA;AACAb,aAAOsF,QAAP,GAAkB,oCAAyB,GAAzB,CAAlB;;AAEA;AACA;AACA;AACArF,WAAKW,gBAAL,CAAsB,cAAtB;;AAEA,mBAAOF,KAAP,CAAaT,KAAKY,aAAlB,EAAiC,cAAjC;AACA,mBAAOgB,IAAP,CACE,oBAAgBkE,OAAhB,CAAwB9F,IAAxB,EAA8B;AAC5B,wBAAgB,OADY;AAE5B,yBAAiB;AAFW,OAA9B,CADF;AAMD,KArBD;AAsBD,GAjJD;;AAmJAH,WAAS,QAAT,EAAmB,YAAM;AACvBW,OAAG,qCAAH,EAA0C,YAAM;AAC9C,UAAIuF,UAAU/F,KAAKqE,MAAL,CAAY,KAAZ,EAAmB,OAAnB,CAAd;AACA,mBAAOzC,IAAP,CAAYmE,iCAAZ;AACA,mBAAOnE,IAAP,CAAY,iBAAEoE,OAAF,CAAUhG,KAAKuC,KAAL,CAAW,CAAX,CAAV,EAAyB,EAAEC,KAAK,KAAP,EAAcM,OAAO,OAArB,EAAzB,CAAZ;AACD,KAJD;AAKD,GAND;;AAQA;AACD,CA7VD,E,CA5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"span.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport JaegerTestUtils from '../src/test_util';\nimport MockLogger from './lib/mock_logger';\nimport * as opentracing from 'opentracing';\nimport Span from '../src/span.js';\nimport SpanContext from '../src/span_context.js';\nimport sinon from 'sinon';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('span should', () => {\n  let reporter = new InMemoryReporter();\n  let tracer, span, spanContext;\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true), { logger: new MockLogger() });\n\n    spanContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n  });\n\n  it('return span context when context() is called', () => {\n    assert.equal(span.context(), spanContext);\n  });\n\n  it('return tracer when tracer() is called', () => {\n    assert.equal(span.tracer(), tracer);\n  });\n\n  it('set operation name correctly', () => {\n    span.setOperationName('operation-name');\n    assert.equal(span.operationName, 'operation-name');\n  });\n\n  it('finish span with custom duration', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    span._startTime = initialDate;\n    let expectedDuration = 1000;\n    let finishDate = initialDate + expectedDuration;\n\n    span.finish(finishDate);\n\n    assert.equal(span._duration, expectedDuration);\n    assert.equal(reporter.spans.length, 1);\n    assert.equal(reporter.spans[0], span);\n  });\n\n  it('finish span twice logs error', () => {\n    span.finish();\n    span.finish();\n    let spanInfo = `operation=${span.operationName},context=${span.context().toString()}`;\n    assert.equal(tracer._logger._errorMsgs[0], `${spanInfo}#You can only call finish() on a span once.`);\n  });\n\n  it('set debug and sampling version through sampling priority', () => {\n    span._setSamplingPriority(3);\n\n    assert.isOk(span.context().isDebug());\n    assert.isOk(span.context().isSampled());\n  });\n\n  it('unset sampling on span', () => {\n    span._setSamplingPriority(0);\n\n    assert.isNotOk(span.context().isSampled());\n  });\n\n  it('add tags', () => {\n    let keyValuePairs = {\n      numberTag: 7,\n      stringTag: 'string',\n      booleanTag: true,\n    };\n    span.addTags(keyValuePairs);\n    span.addTags({ numberTag: 8 });\n\n    // test to make sure consecutive calls with same key does not\n    // overwrite the first key.\n    let count = 0;\n    for (let i = 0; i < span._tags.length; i++) {\n      if (span._tags[i].key === 'numberTag') {\n        count += 1;\n      }\n    }\n\n    assert.isOk(span._tags.length, 4);\n    assert.equal(count, 2);\n  });\n\n  it('add logs with timestamp, and event', () => {\n    let timestamp = new Date(2016, 8, 12).getTime();\n    let event = 'some messgae';\n    span.log({ event: event }, timestamp);\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, timestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n  });\n\n  it('add logs with payload', () => {\n    let payload = { a: 1 };\n    span.log({ payload });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(JSON.stringify(span._logs[0].fields[0].value), JSON.stringify(payload));\n  });\n\n  it('add logs with event, but without timestamp', () => {\n    let expectedTimestamp = 123.456;\n    // mock global clock\n    let clock = sinon.useFakeTimers(expectedTimestamp);\n    let event = 'some messgae';\n    span.log({ event });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, expectedTimestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n    clock.restore();\n  });\n\n  it('set and retrieve baggage correctly', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    let spy = sinon.spy(span._baggageSetter, 'setBaggage');\n    span.setBaggageItem(key, value);\n    assert.equal(value, span.getBaggageItem(key));\n    assert(spy.calledOnce);\n    assert(spy.calledWith(span, key, value));\n  });\n\n  it('inherit baggage from parent', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    span.setBaggageItem(key, value);\n    let child = tracer.startSpan('child', { childOf: span.context() });\n    assert.equal(value, child.getBaggageItem(key));\n  });\n\n  it('normalized key correctly', () => {\n    let unnormalizedKey = 'SOME_KEY';\n    let key = span._normalizeBaggageKey(unnormalizedKey);\n\n    assert.equal(key, 'some-key');\n    assert.isOk(unnormalizedKey in Span._getBaggageHeaderCache());\n  });\n\n  it('not be set to debug via setTag if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isNotOk(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('not be set to debug via addTags if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    const tags = {};\n    tags[opentracing.Tags.SAMPLING_PRIORITY] = 1;\n    span.addTags(tags);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isNotOk(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('ignore sampling.priority tag if span is already debug', () => {\n    tracer._debugThrottler = new DefaultThrottler();\n    const isAllowedSpy = sinon.spy(tracer._debugThrottler, 'isAllowed');\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isOk(span.context().isDebug());\n    assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    // isAllowed should only be called the first time the sampling.priority tag is set\n    sinon.assert.calledOnce(isAllowedSpy);\n    assert.equal(prevTagLength, span._tags.length, 'The sampling.priority tag should only be set once');\n  });\n\n  describe('adaptive sampling tests for span', () => {\n    let options = [\n      { desc: 'sampled: ', sampling: true, reportedSpans: 1 },\n      { desc: 'unsampled: ', sampling: false, reportedSpans: 0 },\n    ];\n    _.each(options, o => {\n      it(o.desc + 'should save tags, and logs on an unsampled span incase it later becomes sampled', () => {\n        let reporter = new InMemoryReporter();\n        let tracer = new Tracer('test-service-name', reporter, new ConstSampler(false), {\n          logger: new MockLogger(),\n        });\n        let span = tracer.startSpan('initially-unsampled-span');\n        span.setTag('tagKeyOne', 'tagValueOne');\n        span.addTags({\n          tagKeyTwo: 'tagValueTwo',\n        });\n        span.log({ logkeyOne: 'logValueOne' });\n\n        tracer._sampler = new ConstSampler(o.sampling);\n        span.setOperationName('sampled-span');\n        span.finish();\n\n        assert.deepEqual(span._tags[0], { key: 'tagKeyOne', value: 'tagValueOne' });\n        assert.deepEqual(span._tags[1], { key: 'tagKeyTwo', value: 'tagValueTwo' });\n        assert.deepEqual(span._logs[0].fields[0], { key: 'logkeyOne', value: 'logValueOne' });\n        assert.equal(reporter.spans.length, o.reportedSpans);\n      });\n    });\n\n    describe('span sampling finalizer', () => {\n      it('should trigger when it inherits a sampling decision', () => {\n        assert.equal(span.context().samplingFinalized, false, 'Span created in before each is not finalized');\n\n        let childSpan = tracer.startSpan('child-span', { childOf: span });\n        assert.isOk(span.context().samplingFinalized);\n        assert.isOk(childSpan.context().samplingFinalized);\n      });\n\n      it('should trigger when it sets the sampling priority', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n        assert.isOk(span.context().samplingFinalized);\n        assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n        const unsampledSpan = tracer.startSpan('unsampled-span');\n        const prevTagLength = span._tags.length;\n        unsampledSpan.setTag(opentracing.Tags.SAMPLING_PRIORITY, -1);\n        assert.isOk(unsampledSpan.context().samplingFinalized);\n        assert.equal(\n          prevTagLength,\n          span._tags.length,\n          'The sampling.priority tag should not be set if span is finalized and not sampled'\n        );\n      });\n\n      it('should trigger on a finish()-ed span', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.finish();\n        assert.isOk(span.context().samplingFinalized);\n      });\n\n      it('should trigger after calling setOperationName', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.setOperationName('fry');\n        assert.isOk(span.context().samplingFinalized);\n      });\n\n      it('should trigger when its context is injected into headers', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        let headers = {};\n        tracer.inject(span.context(), opentracing.FORMAT_HTTP_HEADERS, headers);\n\n        assert.isOk(span.context().samplingFinalized);\n      });\n    });\n\n    it('isWriteable returns true if not finalized, or the span is sampled', () => {\n      tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(false), {\n        logger: new MockLogger(),\n      });\n      let unFinalizedSpan = tracer.startSpan('unFinalizedSpan');\n      assert.equal(unFinalizedSpan.context().samplingFinalized, false);\n      assert.isOk(unFinalizedSpan._isWriteable());\n\n      tracer._sampler = new ConstSampler(true);\n      let sampledSpan = tracer.startSpan('sampled-span');\n\n      sampledSpan.finish(); // finalizes the span\n      assert.isOk(sampledSpan.context().samplingFinalized);\n\n      assert.isOk(sampledSpan._isWriteable());\n    });\n\n    it('2nd setOperationName should add sampler tags to span, and change operationName', () => {\n      let span = tracer.startSpan('fry');\n\n      assert.equal(span.operationName, 'fry');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'const',\n          'sampler.param': true,\n        })\n      );\n      tracer._sampler = new ProbabilisticSampler(1.0);\n      span.setOperationName('re-sampled-span');\n\n      assert.equal(span.operationName, 're-sampled-span');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'probabilistic',\n          'sampler.param': 1,\n        })\n      );\n    });\n\n    it('2nd setOperationName should not change the sampling tags, but should change the operationName', () => {\n      let span = tracer.startSpan('fry');\n\n      span.setOperationName('new-span-one');\n      assert.equal(span.operationName, 'new-span-one');\n\n      // update sampler to something will always sample\n      tracer._sampler = new ProbabilisticSampler(1.0);\n\n      // The second cal lshould rename the operation name, but\n      // not re-sample the span.  This is because finalize was set\n      // in the first 'setOperationName' call.\n      span.setOperationName('new-span-two');\n\n      assert.equal(span.operationName, 'new-span-two');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'const',\n          'sampler.param': true,\n        })\n      );\n    });\n  });\n\n  describe('setTag', () => {\n    it('should set a tag, and return a span', () => {\n      let newSpan = span.setTag('key', 'value');\n      assert.isOk(newSpan instanceof Span);\n      assert.isOk(_.isEqual(span._tags[0], { key: 'key', value: 'value' }));\n    });\n  });\n\n  // TODO(oibe) need tests for standard tags, and handlers\n});\n"]}