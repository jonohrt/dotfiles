{"version":3,"sources":["../../test/span_context.js"],"names":["constants","describe","LARGEST_64_BUFFER","before","Buffer","writeUInt32BE","it","traceId","encodeInt64","spanId","parentId","flags","context","withBinaryIds","deepEqual","equal","isOk","isSampled","isDebug","_flags","isNotOk","ctx1","toString","ctx2","ctx3","traceIdStr","spanIdStr","parentIdStr","fromString"],"mappings":"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","file":"span_context.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport * as constants from '../src/constants.js';\nimport SpanContext from '../src/span_context.js';\nimport Utils from '../src/util.js';\n\ndescribe('SpanContext should', () => {\n  let LARGEST_64_BUFFER;\n  before(() => {\n    LARGEST_64_BUFFER = new Buffer(8);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 0);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 4);\n  });\n\n  it('return given values as they were set', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n    assert.deepEqual(traceId, context.traceId);\n    assert.deepEqual(spanId, context.spanId);\n    assert.deepEqual(parentId, context.parentId);\n    assert.equal(flags, context.flags);\n  });\n\n  it('return IsSampled properly', () => {\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      3\n    );\n    assert.isOk(context.isSampled());\n    assert.isOk(context.isDebug());\n\n    context._flags = 0;\n    assert.isNotOk(context.isSampled());\n    assert.isNotOk(context.isDebug());\n  });\n\n  it('format strings properly with toString', () => {\n    let ctx1 = SpanContext.withBinaryIds(Utils.encodeInt64(0x100), Utils.encodeInt64(0x7f), null, 1);\n    assert.equal(ctx1.toString(), '100:7f:0:1');\n\n    let ctx2 = SpanContext.withBinaryIds(\n      Utils.encodeInt64(255 << 4),\n      Utils.encodeInt64(127),\n      Utils.encodeInt64(256),\n      0\n    );\n    assert.equal(ctx2.toString(), 'ff0:7f:100:0');\n\n    // test large numbers\n    let ctx3 = SpanContext.withBinaryIds(LARGEST_64_BUFFER, LARGEST_64_BUFFER, LARGEST_64_BUFFER, 0);\n    assert.equal(ctx3.toString(), 'ffffffffffffffff:ffffffffffffffff:ffffffffffffffff:0');\n    assert.equal('ffffffffffffffff', ctx3.traceIdStr);\n    assert.equal('ffffffffffffffff', ctx3.spanIdStr);\n    assert.equal('ffffffffffffffff', ctx3.parentIdStr);\n  });\n\n  it('turn properly formatted strings into correct span contexts', () => {\n    let context = SpanContext.fromString('100:7f:0:1');\n\n    assert.deepEqual('100', context.traceIdStr);\n    assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n    assert.equal(null, context.parentId);\n    assert.equal(1, context.flags);\n\n    // test large numbers\n    context = SpanContext.fromString('ffffffffffffffff:ffffffffffffffff:5:1');\n    assert.equal('ffffffffffffffff', context.traceIdStr);\n    assert.equal('ffffffffffffffff', context.spanIdStr);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n    assert.equal(context.flags, 0x1);\n  });\n\n  it('return null on malformed traces', () => {\n    assert.equal(SpanContext.fromString('bad value'), null);\n    assert.equal(SpanContext.fromString('1:1:1:1:1'), null, 'Too many colons');\n    assert.equal(SpanContext.fromString('1:1:1'), null, 'Too few colons');\n    assert.equal(SpanContext.fromString('x:1:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:x:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:x:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:1:x'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('0:1:1:1'), null, 'Trace ID cannot be zero');\n  });\n});\n"]}