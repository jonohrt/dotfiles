{"version":3,"sources":["../../test/thrift.js"],"names":["describe","it","blob","Buffer","testCases","key","value","vType","vDouble","vBool","vBinary","vStr","x","f","forEach","tag","testCase","actualTag","getThriftTags","expectedTag","undefined","vLong","emptyBuffer","deepEqual","buf","fill","reporter","tracer","span","startSpan","startTime","log","event","finish","close","tSpan","spanToThrift","encodeInt64","duration","logs","timestamp"],"mappings":"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","file":"thrift.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport Tracer from '../src/tracer.js';\nimport ThriftUtils from '../src/thrift.js';\nimport Utils from '../src/util.js';\n\ndescribe('ThriftUtils', () => {\n  it('should exercise all paths in getTagType', () => {\n    let blob = new Buffer(1);\n    let testCases = [\n      { key: 'double', value: 1.0, vType: 'DOUBLE', vDouble: 1.0 },\n      { key: 'boolean', value: true, vType: 'BOOL', vBool: true },\n      { key: 'binary', value: blob, vType: 'BINARY', vBinary: blob },\n      { key: 'string', value: 'some-string', vType: 'STRING', vStr: 'some-string' },\n      { key: 'object', value: { x: 'y' }, vType: 'STRING', vStr: `{\"x\":\"y\"}` },\n      { key: 'func', value: function f() {}, vType: 'STRING', vStr: `function f() {}` },\n    ];\n\n    testCases.forEach(testCase => {\n      let tag = { key: testCase['key'], value: testCase['value'] };\n      let actualTag = ThriftUtils.getThriftTags([tag])[0];\n      let expectedTag = {\n        key: testCase.key,\n        vType: testCase.vType,\n        vStr: testCase.vStr === undefined ? '' : testCase.vStr,\n        vDouble: testCase.vDouble === undefined ? 0 : testCase.vDouble,\n        vBool: testCase.vBool === undefined ? false : testCase.vBool,\n        vLong: testCase.vLong === undefined ? ThriftUtils.emptyBuffer : testCase.vLong,\n        vBinary: testCase.vBinary === undefined ? ThriftUtils.emptyBuffer : testCase.vBinary,\n      };\n      assert.deepEqual(actualTag, expectedTag);\n    });\n  });\n\n  it('should initialize emptyBuffer to all zeros', () => {\n    let buf = new Buffer(8);\n    buf.fill(0);\n\n    assert.deepEqual(ThriftUtils.emptyBuffer, buf);\n  });\n\n  it('should convert timestamps to microseconds', () => {\n    let reporter = new InMemoryReporter();\n    let tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    let span = tracer.startSpan('some operation', { startTime: 123.456 });\n    span.log({ event: 'some log' }, 123.567);\n    span.finish(123.678);\n    tracer.close();\n    let tSpan = ThriftUtils.spanToThrift(span);\n    assert.deepEqual(tSpan.startTime, Utils.encodeInt64(123456));\n    assert.deepEqual(tSpan.duration, Utils.encodeInt64((123.678 - 123.456) * 1000));\n    assert.deepEqual(tSpan.logs[0].timestamp, Utils.encodeInt64(123567));\n  });\n});\n"]}