{"version":3,"sources":["../../../test/baggage/baggage_setter.js"],"names":["describe","metrics","reporter","tracer","span","assertBaggageLogs","log","key","value","truncated","override","invalid","fields","forEach","kv","equal","event","beforeEach","startSpan","afterEach","close","it","mgr","stub","setter","spanContext","setBaggage","isUndefined","_baggage","_logs","counterValue","baggageUpdateFailure","expected","_spanContext","context","withBaggageItem","baggageUpdateSuccess","baggageTruncate","baggageRestrictionManager","lengthOf"],"mappings":"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","file":"baggage_setter.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport Metrics from '../../src/metrics/metrics.js';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport BaggageSetter from '../../src/baggage/baggage_setter.js';\nimport Tracer from '../../src/tracer.js';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultBaggageRestrictionManager from '../../src/baggage/default_baggage_restriction_manager.js';\nimport Restriction from '../../src/baggage/restriction';\nimport sinon from 'sinon';\n\ndescribe('BaggageSetter should', () => {\n  let metrics: Metrics;\n  let reporter = new InMemoryReporter();\n  let tracer, span;\n\n  let assertBaggageLogs = function(log, key, value, truncated, override, invalid) {\n    let fields: { [key: string]: string } = {};\n    log.fields.forEach(kv => {\n      fields[kv.key] = kv.value;\n    });\n    assert.equal(fields.event, 'baggage');\n    assert.equal(fields.key, key);\n    assert.equal(fields.value, value);\n    if (truncated) {\n      assert.equal(fields.truncated, 'true');\n    }\n    if (override) {\n      assert.equal(fields.override, 'true');\n    }\n    if (invalid) {\n      assert.equal(fields.invalid, 'true');\n    }\n  };\n\n  beforeEach(() => {\n    metrics = new Metrics(new LocalMetricFactory());\n\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true), {\n      metrics: metrics,\n    });\n\n    span = tracer.startSpan('op-name');\n  });\n\n  afterEach(() => {\n    tracer.close();\n  });\n\n  it('fail for invalid baggage key', () => {\n    let mgr = new DefaultBaggageRestrictionManager();\n    sinon.stub(mgr, 'getRestriction', function(key) {\n      return new Restriction(false, 0);\n    });\n    let setter = new BaggageSetter(mgr, metrics);\n    let key = 'key';\n    let value = 'value';\n    let spanContext = setter.setBaggage(span, key, value);\n    assert.isUndefined(spanContext._baggage[key]);\n    assertBaggageLogs(span._logs[0], key, value, false, false, true);\n    assert.equal(LocalBackend.counterValue(metrics.baggageUpdateFailure), 1);\n  });\n\n  it('truncate valid baggage key using maxValueLength', () => {\n    let setter = new BaggageSetter(new DefaultBaggageRestrictionManager(5), metrics);\n    let key = 'key';\n    let value = '0123456789';\n    let expected = '01234';\n    // Set pre existing baggage to context\n    span._spanContext = span.context().withBaggageItem(key, value);\n\n    let spanContext = setter.setBaggage(span, key, value);\n    assert.equal(spanContext._baggage[key], expected);\n    assertBaggageLogs(span._logs[0], key, expected, true, true, false);\n    assert.equal(LocalBackend.counterValue(metrics.baggageUpdateSuccess), 1);\n    assert.equal(LocalBackend.counterValue(metrics.baggageTruncate), 1);\n  });\n\n  it('not set logs if span is not sampled', () => {\n    let mgr = new DefaultBaggageRestrictionManager();\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(false), {\n      metrics: metrics,\n      baggageRestrictionManager: mgr,\n    });\n    span = tracer.startSpan('op-name');\n\n    let setter = new BaggageSetter(mgr, metrics);\n    let key = 'key';\n    let value = '0123456789';\n    let spanContext = setter.setBaggage(span, key, value);\n    assert.equal(spanContext._baggage[key], value);\n    assert.lengthOf(span._logs, 0);\n  });\n});\n"]}