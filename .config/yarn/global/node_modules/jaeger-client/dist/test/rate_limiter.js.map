{"version":3,"sources":["../../test/rate_limiter.js"],"names":["describe","it","initialDate","Date","getTime","clock","useFakeTimers","limiter","i","equal","checkCredit","restore","limit","cost","_balance","update"],"mappings":"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","file":"rate_limiter.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport RateLimiter from '../src/rate_limiter';\nimport sinon from 'sinon';\n\ndescribe('leaky bucket ratelimiter should', () => {\n  it('block after threshold is met', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    let clock = sinon.useFakeTimers(initialDate);\n    let limiter = new RateLimiter(10, 10, 10);\n    for (let i = 0; i < 10; i++) {\n      assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    }\n    assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n\n    clock.restore();\n    clock = sinon.useFakeTimers(initialDate + 1000);\n    for (let i = 0; i < 10; i++) {\n      assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    }\n    assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n    clock.restore();\n  });\n\n  it('work for fractional values', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    let clock = sinon.useFakeTimers(initialDate);\n    let limit = 500;\n    let cost = 1 / limit;\n    let limiter = new RateLimiter(1, 1);\n    for (let i = 0; i < limit; i++) {\n      limiter.checkCredit(cost);\n    }\n\n    assert.equal(limiter.checkCredit(cost), false, 'expected checkCredit to be false');\n\n    clock.restore();\n    clock = sinon.useFakeTimers(initialDate + 1000);\n    assert.equal(limiter.checkCredit(cost), true, 'expected checkCredit to be true');\n    clock.restore();\n  });\n\n  it('work with creditsPerSecond smaller than 1', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    let clock = sinon.useFakeTimers(initialDate);\n    let limiter = new RateLimiter(0.1, 1, 1);\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n\n    clock.restore();\n    // move time 20s forward, enough to accumulate credits for 2 messages, but it should still be capped at 1\n    clock = sinon.useFakeTimers(initialDate + 20000);\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n    clock.restore();\n  });\n\n  it('update balance', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    let clock = sinon.useFakeTimers(initialDate);\n    let limiter = new RateLimiter(0.1, 1);\n    assert.equal(\n      true,\n      limiter._balance <= 1 && limiter._balance >= 0,\n      'balance should be initialized to a random value between [0:1]'\n    );\n    limiter._balance = 1.0;\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n\n    limiter.update(0.1, 3);\n    clock.restore();\n    // move time 20s forward, enough to accumulate credits for 2 messages\n    clock = sinon.useFakeTimers(initialDate + 20000);\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n\n    // move time 30s forward, enough to accumulate credits for another message (should have\n    // enough credits for 3 at this point)\n    clock = sinon.useFakeTimers(initialDate + 50000);\n    assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n    assert.equal(limiter._balance, 2, 'balance should be at 2 after spending 1');\n\n    // move time 5s forward, not enough to accumulate credits for another message\n    clock = sinon.useFakeTimers(initialDate + 55000);\n    // reduce the maxBalance so the limiter is capped at 1\n    limiter.update(0.1, 1);\n    assert.equal(limiter._balance, 2.5 / 3.0, 'balance should be proportional to the original range');\n    assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n    clock.restore();\n  });\n});\n"]}