{"version":3,"sources":["../../../test/throttler/remote_throttler.js"],"names":["describe","server","logger","metrics","throttler","serviceName","operation","other_operation","uuid","creditsUpdatedHook","before","start","after","close","beforeEach","clearConfigs","spy","refreshIntervalMs","initialDelayMs","onCreditsUpdate","afterEach","it","setProcess","addCredits","balance","isOk","_throttler","isAllowed","equal","_credits","counterValue","throttlerUpdateSuccess","throttledDebugSpans","done","isNotOk","_refreshCredits","_fetchCredits","_errorMsgs","length","assert","notCalled","_isAllowed","throttlerUpdateFailure","increment","_host","_afterInitialDelay"],"mappings":"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","file":"remote_throttler.js","sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport Metrics from '../../src/metrics/metrics.js';\nimport MockLogger from '../lib/mock_logger';\nimport ConfigServer from '../lib/config_server';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport RemoteThrottler from '../../src/throttler/remote_throttler';\nimport sinon from 'sinon';\n\ndescribe('RemoteThrottler should', () => {\n  let server: ConfigServer;\n  let logger: MockLogger;\n  let metrics: Metrics;\n  let throttler: RemoteThrottler;\n  let serviceName = 'service';\n  let operation = 'op';\n  let other_operation = 'oop';\n  let uuid = 'uuid';\n  let creditsUpdatedHook;\n\n  before(() => {\n    server = new ConfigServer().start();\n  });\n\n  after(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    server.clearConfigs();\n    logger = new MockLogger();\n    metrics = new Metrics(new LocalMetricFactory());\n    creditsUpdatedHook = sinon.spy();\n    throttler = new RemoteThrottler(serviceName, {\n      refreshIntervalMs: 0,\n      initialDelayMs: 60000,\n      metrics: metrics,\n      logger: logger,\n      onCreditsUpdate: (...args) => creditsUpdatedHook(...args),\n    });\n  });\n\n  afterEach(() => {\n    throttler.close();\n  });\n\n  it('return false for isAllowed on initial call and return true once credits are initialized', done => {\n    throttler.setProcess({ uuid: uuid });\n    server.addCredits(serviceName, [{ operation: operation, balance: 3 }]);\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 2);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 1);\n      done();\n    };\n    assert.isNotOk(throttler.isAllowed(operation));\n    throttler._refreshCredits();\n  });\n\n  it('log an error if _refreshCredits is called prior to UUID being set', () => {\n    throttler._fetchCredits = sinon.spy();\n    throttler._refreshCredits();\n    assert.equal(logger._errorMsgs.length, 1);\n    sinon.assert.notCalled(throttler._fetchCredits);\n  });\n\n  it('not fetch credits if uuid is invalid', () => {\n    throttler._fetchCredits = sinon.spy();\n    throttler.setProcess({ uuid: null });\n    throttler._refreshCredits();\n    assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n    sinon.assert.notCalled(throttler._fetchCredits);\n  });\n\n  it(\"return false for _isAllowed if operation isn't in _credits or operation has no credits\", () => {\n    assert.isNotOk(\n      throttler._isAllowed(operation),\n      'operation is not set so operation should not be allowed'\n    );\n    throttler._credits[operation] = 0;\n    assert.isNotOk(throttler._isAllowed(operation), 'operation is set but lacks credit');\n    assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 2);\n  });\n\n  it(\"return false for isAllowed if operation doesn't have enough credits\", () => {\n    throttler._credits[operation] = 0.5;\n    assert.isNotOk(throttler._isAllowed(operation));\n    assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 1);\n  });\n\n  it('succeed when we retrieve credits for multiple operations', done => {\n    throttler.setProcess({ uuid: uuid });\n    server.addCredits(serviceName, [\n      { operation: operation, balance: 5 },\n      { operation: other_operation, balance: 3 },\n    ]);\n    throttler._credits[operation] = 0;\n    throttler._credits[other_operation] = 0;\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 4);\n      assert.isOk(_throttler.isAllowed(other_operation));\n      assert.equal(_throttler._credits[other_operation], 2);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      done();\n    };\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric on failing to query for credits', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    throttler._host = 'Llanfair­pwllgwyngyll­gogery­chwyrn­drobwll­llan­tysilio­gogo­goch';\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric on failing to parse bad http json response', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    server.addCredits(serviceName, 'not-json');\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric when server returns an invalid response', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    throttler._refreshCredits();\n  });\n\n  it('not fetch credits if no operations have been seen', () => {\n    throttler = new RemoteThrottler(serviceName);\n    throttler._fetchCredits = sinon.spy();\n    throttler.setProcess({ uuid: uuid });\n    throttler._refreshCredits();\n    sinon.assert.notCalled(throttler._fetchCredits);\n    throttler.close();\n  });\n\n  it('refresh credits after _afterInitialDelay is called', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    server.addCredits(serviceName, [{ operation: operation, balance: 5 }]);\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 4);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      done();\n    };\n    throttler._afterInitialDelay();\n  });\n});\n"]}