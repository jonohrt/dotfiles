{"version":3,"sources":["../../test/zipkin_b3_text_map_codec.js"],"names":["constants","describe","tracer","codec","metrics","beforeEach","urlEncoding","registerInjector","FORMAT_HTTP_HEADERS","registerExtractor","afterEach","close","it","headers","context","extract","isOk","counterEquals","decodingErrors","JAEGER_DEBUG_HEADER","encodeURIComponent","equal","debugId","testCases","forEach","testCase","isNotOk","spanIdStr","traceIdStr","parentIdStr","isSampled","isDebug","ctx","withStringIds","inject","isUndefined","flags","SAMPLED_MASK","DEBUG_MASK","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","baggage"],"mappings":"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","file":"zipkin_b3_text_map_codec.js","sourcesContent":["// Copyright (c) 2017 The Jaeger Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport * as constants from '../src/constants.js';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport SpanContext from '../src/span_context.js';\nimport ZipkinB3TextMapCodec from '../src/propagators/zipkin_b3_text_map_codec.js';\n\ndescribe('Zipkin B3 Text Map Codec should', () => {\n  let tracer, codec, metrics;\n\n  beforeEach(() => {\n    metrics = new Metrics(new LocalMetricFactory());\n    tracer = new Tracer('test-tracer', new InMemoryReporter(), new ConstSampler(false), {\n      metrics: metrics,\n    });\n\n    codec = new ZipkinB3TextMapCodec({\n      urlEncoding: true,\n      metrics: metrics,\n    });\n\n    tracer.registerInjector(opentracing.FORMAT_HTTP_HEADERS, codec);\n    tracer.registerExtractor(opentracing.FORMAT_HTTP_HEADERS, codec);\n  });\n\n  afterEach(() => {\n    tracer.close();\n  });\n\n  it('report a metric when failing to decode tracer state', () => {\n    let headers = {\n      'x-b3-traceid': 'zzz-bad-value',\n    };\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n\n    assert.isOk(context);\n    assert.isOk(LocalBackend.counterEquals(metrics.decodingErrors, 1));\n  });\n\n  it('set debug flag when debug-id-header is received', () => {\n    let headers = {};\n    headers[constants.JAEGER_DEBUG_HEADER] = encodeURIComponent('value1');\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.equal(context.debugId, 'value1');\n  });\n\n  it('return a context devoid of trace/span ids if invalid ids are encountered in the headers', () => {\n    let testCases = [\n      {\n        'x-b3-traceid': 'zzzzzz',\n        'x-b3-spanid': '123abc',\n        'x-b3-parentspanid': '456def',\n      },\n      {\n        'x-b3-traceid': '123abc',\n        'x-b3-spanid': 'zzzzzz',\n        'x-b3-parentspanid': '456def',\n      },\n      {\n        'x-b3-traceid': '123abc',\n        'x-b3-spanid': '456def',\n        'x-b3-parentspanid': 'zzzzz',\n      },\n    ];\n\n    testCases.forEach(testCase => {\n      let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, testCase);\n\n      assert.isOk(context);\n      assert.isNotOk(context.spanIdStr);\n      assert.isNotOk(context.traceIdStr);\n      assert.isNotOk(context.parentIdStr);\n    });\n  });\n\n  it('set the sampled flag when the zipkin sampled header is received', () => {\n    let headers = {\n      'x-b3-sampled': '1',\n    };\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.isOk(context.isSampled());\n    assert.isNotOk(context.isDebug());\n  });\n\n  it('set the debug and sampled flags when the zipkin flags header is received', () => {\n    let headers = {\n      'x-b3-flags': '1',\n    };\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.isOk(context.isSampled());\n    assert.isOk(context.isDebug());\n\n    headers = {\n      'x-b3-flags': '0',\n    };\n\n    context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.isNotOk(context.isSampled());\n    assert.isNotOk(context.isDebug());\n  });\n\n  it('should set the sampled header to \"0\" if not sampling', () => {\n    let headers = {};\n\n    let ctx = SpanContext.withStringIds('some-trace', 'some-span', 'some-parent');\n    codec.inject(ctx, headers);\n\n    assert.isUndefined(headers['x-b3-flags']);\n    assert.equal(headers['x-b3-sampled'], '0');\n  });\n\n  it('should set the sampled header to \"1\" if sampling', () => {\n    let headers = {};\n\n    let ctx = SpanContext.withStringIds('a', 'b', 'c');\n    ctx.flags = constants.SAMPLED_MASK;\n\n    codec.inject(ctx, headers);\n\n    assert.isUndefined(headers['x-b3-flags']);\n    assert.equal(headers['x-b3-sampled'], '1');\n  });\n\n  it('should not send the sampled header if debug', () => {\n    let headers = {};\n\n    let ctx = SpanContext.withStringIds('some-trace', 'some-span', 'some-parent');\n    ctx.flags = constants.DEBUG_MASK;\n\n    codec.inject(ctx, headers);\n\n    assert.equal(headers['x-b3-flags'], '1');\n    // > Since Debug implies Sampled, so don't also send \"X-B3-Sampled: 1\"\n    // https://github.com/openzipkin/b3-propagation\n    assert.isUndefined(headers['x-b3-sampled']);\n  });\n\n  it('supports the use of the baggage headers', () => {\n    let headers = {};\n    headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'a-key'] = 'a-value';\n    headers[constants.JAEGER_BAGGAGE_HEADER] = 'some-key=some-value, another-key=another-value';\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.equal(context.baggage['a-key'], 'a-value');\n    assert.equal(context.baggage['some-key'], 'some-value');\n    assert.equal(context.baggage['another-key'], 'another-value');\n  });\n});\n"]}