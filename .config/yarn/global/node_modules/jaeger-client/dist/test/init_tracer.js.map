{"version":3,"sources":["../../test/init_tracer.js"],"names":["url","logger","info","msg","metrics","createCounter","increment","createGauge","createTimer","describe","it","config","serviceName","disable","tracer","to","be","an","instanceof","Tracer","configs","each","throw","_sampler","_reporter","close","done","options","type","param","expectedType","expectedParam","samplerConfig","sampler","count","err","equal","reporter","logSpans","agentHost","agentPort","flushIntervalMs","remoteReporter","i","_reporters","length","_bufferFlushInterval","_sender","_host","_port","instanceOf","protocol","collectorEndpoint","username","undefined","password","format","_url","tags","x","_logger","_metrics","_factory","_tags","throttler","refreshIntervalMs","_debugThrottler","afterEach","process","env","JAEGER_SERVICE_NAME","JAEGER_DISABLE","JAEGER_TAGS","JAEGER_SAMPLER_TYPE","JAEGER_SAMPLER_PARAM","JAEGER_SAMPLER_HOST","JAEGER_SAMPLER_PORT","JAEGER_SAMPLER_REFRESH_INTERVAL","JAEGER_REPORTER_AGENT_PORT","JAEGER_REPORTER_AGENT_HOST","JAEGER_REPORTER_ENDPOINT","JAEGER_REPORTER_USER","JAEGER_REPORTER_PASSWORD","JAEGER_REPORTER_FLUSH_INTERVAL","JAEGER_REPORTER_LOG_SPANS","_serviceName","TEST_KEY","_samplingRate","_refreshInterval","href","_username","_password","host","port","KEY2"],"mappings":"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","file":"init_tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport * as url from 'url';\nimport { assert, expect } from 'chai';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport RemoteSampler from '../src/samplers/remote_sampler';\nimport RateLimitingSampler from '../src/samplers/ratelimiting_sampler';\nimport { initTracer, initTracerFromEnv } from '../src/index.js';\nimport opentracing from 'opentracing';\nimport RemoteThrottler from '../src/throttler/remote_throttler';\nimport DefaultThrottler from '../src/throttler/default_throttler';\nimport HTTPSender from '../src/reporters/http_sender.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\n\nconst logger = {\n  info: function info(msg) {},\n};\n\nconst metrics = {\n  createCounter: function createCounter() {\n    return {\n      increment: function() {},\n    };\n  },\n  createGauge: function createGauge() {\n    return {};\n  },\n  createTimer: function createTimer() {\n    return {};\n  },\n};\n\ndescribe('initTracer', () => {\n  it('should initialize noop tracer when disable is set', () => {\n    let config = {\n      serviceName: 'test-service',\n      disable: true,\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should throw error on invalid serviceName', () => {\n    let configs = [{ serviceName: '' }, { serviceName: null }, {}];\n\n    _.each(configs, config => {\n      expect(() => {\n        initTracer(config);\n      }).to.throw('config.serviceName must be provided');\n    });\n  });\n\n  it('should initialize normal tracer when only service name given', done => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    tracer.close(done);\n  });\n\n  it('should initialize proper samplers', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 1, expectedType: ConstSampler, expectedParam: 1 },\n      { type: 'ratelimiting', param: 2, expectedType: RateLimitingSampler, expectedParam: 2 },\n      { type: 'probabilistic', param: 0.5, expectedType: ProbabilisticSampler, expectedParam: 0.5 },\n      { type: 'remote', param: 1, expectedType: RemoteSampler, expectedParam: 1 },\n    ];\n\n    _.each(options, samplerConfig => {\n      let expectedType = samplerConfig.expectedType;\n      let expectedParam = samplerConfig.expectedParam;\n      delete samplerConfig.expectedType;\n      delete samplerConfig.expectedParam;\n\n      config.sampler = samplerConfig;\n      let tracer = initTracer(config);\n\n      expect(tracer._sampler).to.be.an.instanceof(expectedType);\n      tracer.close();\n      // TODO(oibe:head) test utils for expectedParam here?\n    });\n  });\n\n  it('should throw error on sampler incorrect type', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 'bad-value' },\n      { type: 'ratelimiting', param: 'bad-value' },\n      { type: 'probabilistic', param: 'bad-value' },\n      { type: 'remote', param: 'bad-value' },\n    ];\n\n    let count = 0;\n    _.each(options, samplerConfig => {\n      config.sampler = samplerConfig;\n\n      // Since its an error from a third party framework, its hard to assert on\n      // using expect.\n      try {\n        initTracer(config);\n      } catch (err) {\n        count += 1;\n      }\n    });\n\n    assert.equal(count, 4);\n  });\n\n  describe('reporter options', () => {\n    it('should respect reporter options', done => {\n      let config = {\n        serviceName: 'test-service',\n        sampler: {\n          type: 'const',\n          param: 0,\n        },\n        reporter: {\n          logSpans: true,\n          agentHost: '127.0.0.1',\n          agentPort: 4939,\n          flushIntervalMs: 2000,\n        },\n      };\n      let tracer = initTracer(config);\n\n      expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n      let remoteReporter;\n      for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n        let reporter = tracer._reporter._reporters[i];\n        if (reporter instanceof RemoteReporter) {\n          remoteReporter = reporter;\n          break;\n        }\n      }\n\n      assert.equal(remoteReporter._bufferFlushInterval, 2000);\n      assert.equal(remoteReporter._sender._host, '127.0.0.1');\n      assert.equal(remoteReporter._sender._port, 4939);\n      assert.instanceOf(remoteReporter._sender, UDPSender);\n      tracer.close(done);\n    });\n\n    _.each(['http', 'https'], protocol => {\n      it(`should create an HTTPSender if protocol is ${protocol}`, done => {\n        let config = {\n          serviceName: 'test-service',\n          sampler: {\n            type: 'const',\n            param: 0,\n          },\n          reporter: {\n            logSpans: true,\n            collectorEndpoint: `${protocol}://127.0.0.1:4939/my/path`,\n            username: protocol === 'https' ? 'test' : undefined,\n            password: protocol === 'https' ? 'mypass' : undefined,\n            flushIntervalMs: 2000,\n          },\n        };\n        let tracer = initTracer(config);\n\n        expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n        let remoteReporter;\n        for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n          let reporter = tracer._reporter._reporters[i];\n          if (reporter instanceof RemoteReporter) {\n            remoteReporter = reporter;\n            break;\n          }\n        }\n\n        assert.equal(url.format(remoteReporter._sender._url), `${protocol}://127.0.0.1:4939/my/path`);\n        assert.instanceOf(remoteReporter._sender, HTTPSender);\n        tracer.close(done);\n      });\n    });\n  });\n\n  it('should pass options to tracer', done => {\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n        tags: {\n          x: 'y',\n        },\n      }\n    );\n    assert.equal(tracer._logger, logger);\n    assert.equal(tracer._metrics._factory, metrics);\n    assert.equal(tracer._tags['x'], 'y');\n    tracer.close(done);\n  });\n\n  it('should pass options to remote sampler and reporter', done => {\n    let logger = {\n      info: function info(msg) {},\n    };\n    let metrics = {\n      createCounter: function createCounter() {\n        return {\n          increment: function() {},\n        };\n      },\n      createGauge: function createGauge() {\n        return {};\n      },\n      createTimer: function createTimer() {\n        return {};\n      },\n    };\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n        sampler: {\n          type: 'remote',\n          param: 0,\n        },\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n      }\n    );\n    assert.equal(tracer._reporter._metrics._factory, metrics);\n    assert.equal(tracer._reporter._logger, logger);\n    assert.equal(tracer._sampler._metrics._factory, metrics);\n    assert.equal(tracer._sampler._logger, logger);\n    tracer.close(done);\n  });\n\n  it('should initialize throttler from config', () => {\n    const config = {\n      serviceName: 'test-service',\n      throttler: {\n        refreshIntervalMs: 60000,\n      },\n    };\n    const tracer = initTracer(config, { logger: logger, metrics: metrics });\n    expect(tracer._debugThrottler).to.be.an.instanceof(RemoteThrottler);\n  });\n\n  it('should delegate throttler initialization to tracer', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const tracer = initTracer(config);\n    expect(tracer._debugThrottler).to.be.an.instanceof(DefaultThrottler);\n  });\n\n  it('should use throttler passed in via options', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const throttler = new RemoteThrottler();\n    const tracer = initTracer(config, { throttler: throttler });\n    expect(tracer._debugThrottler).to.equal(throttler);\n    throttler.close();\n  });\n});\n\ndescribe('initTracerFromENV', () => {\n  afterEach(() => {\n    delete process.env.JAEGER_SERVICE_NAME;\n    delete process.env.JAEGER_DISABLE;\n    delete process.env.JAEGER_TAGS;\n    delete process.env.JAEGER_SAMPLER_TYPE;\n    delete process.env.JAEGER_SAMPLER_PARAM;\n    delete process.env.JAEGER_SAMPLER_HOST;\n    delete process.env.JAEGER_SAMPLER_PORT;\n    delete process.env.JAEGER_SAMPLER_REFRESH_INTERVAL;\n    delete process.env.JAEGER_REPORTER_AGENT_PORT;\n    delete process.env.JAEGER_REPORTER_AGENT_HOST;\n    delete process.env.JAEGER_REPORTER_ENDPOINT;\n    delete process.env.JAEGER_REPORTER_USER;\n    delete process.env.JAEGER_REPORTER_PASSWORD;\n    delete process.env.JAEGER_REPORTER_FLUSH_INTERVAL;\n    delete process.env.JAEGER_REPORTER_LOG_SPANS;\n  });\n\n  it('should initialize noop tracer with disable env is set', () => {\n    process.env.JAEGER_DISABLE = true;\n\n    let tracer = initTracerFromEnv();\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should initialize tracer from env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLE = false;\n\n    let tracer = initTracerFromEnv();\n    assert.equal(tracer._serviceName, 'test-service');\n\n    tracer.close();\n  });\n\n  it('should throw error on no serviceName', () => {\n    delete process.env.JAEGER_SERVICE_NAME;\n    expect(() => {\n      initTracerFromEnv();\n    }).to.throw('config.serviceName must be provided');\n  });\n\n  it('should parse tags', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLE = false;\n    process.env.JAEGER_TAGS = 'KEY1=${TEST_KEY:VALUE1}, KEY2=VALUE2,KEY3=${TEST_KEY2:VALUE3}';\n    process.env.TEST_KEY = 'VALUE4';\n    let tracer = initTracerFromEnv();\n    assert.equal(tracer._tags['KEY1'], 'VALUE4');\n    assert.equal(tracer._tags['KEY2'], 'VALUE2');\n    assert.equal(tracer._tags['KEY3'], 'VALUE3');\n\n    tracer.close();\n  });\n\n  it('should initialize proper samplers from env', () => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n\n    process.env.JAEGER_SAMPLER_TYPE = 'probabilistic';\n    process.env.JAEGER_SAMPLER_PARAM = 0.5;\n    let tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(ProbabilisticSampler);\n    assert.equal(tracer._sampler._samplingRate, 0.5);\n    tracer.close();\n\n    process.env.JAEGER_SAMPLER_TYPE = 'remote';\n    process.env.JAEGER_SAMPLER_HOST = 'localhost';\n    process.env.JAEGER_SAMPLER_PORT = 8080;\n    process.env.JAEGER_SAMPLER_REFRESH_INTERVAL = 100;\n    tracer = initTracerFromEnv();\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._host, 'localhost');\n    assert.equal(tracer._sampler._port, 8080);\n    assert.equal(tracer._sampler._refreshInterval, 100);\n    tracer.close();\n  });\n\n  it('should respect udp reporter options from env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_LOG_SPANS = 'true';\n    process.env.JAEGER_REPORTER_AGENT_HOST = '127.0.0.1';\n    process.env.JAEGER_REPORTER_AGENT_PORT = 4939;\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 2000;\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n    let remoteReporter;\n    for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n      let reporter = tracer._reporter._reporters[i];\n      if (reporter instanceof RemoteReporter) {\n        remoteReporter = reporter;\n        break;\n      }\n    }\n\n    assert.equal(remoteReporter._bufferFlushInterval, 2000);\n    assert.equal(remoteReporter._sender._host, '127.0.0.1');\n    assert.equal(remoteReporter._sender._port, 4939);\n    assert.instanceOf(remoteReporter._sender, UDPSender);\n\n    tracer.close(done);\n  });\n\n  it('should respect http reporter options from env', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_REPORTER_FLUSH_INTERVAL = 3000;\n    process.env.JAEGER_REPORTER_ENDPOINT = 'http://127.0.0.1:8080';\n    process.env.JAEGER_REPORTER_USER = 'test';\n    process.env.JAEGER_REPORTER_PASSWORD = 'xxxx';\n\n    let tracer = initTracerFromEnv();\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    assert.instanceOf(tracer._reporter._sender, HTTPSender);\n    assert.equal(tracer._reporter._bufferFlushInterval, 3000);\n    assert.equal(tracer._reporter._sender._url.href, 'http://127.0.0.1:8080/');\n    assert.equal(tracer._reporter._sender._username, 'test');\n    assert.equal(tracer._reporter._sender._password, 'xxxx');\n\n    tracer.close(done);\n  });\n\n  it('should be overridden via direct config setting.', done => {\n    process.env.JAEGER_SERVICE_NAME = 'test-service';\n    process.env.JAEGER_DISABLE = false;\n    process.env.JAEGER_SAMPLER_TYPE = 'const';\n    process.env.JAEGER_SAMPLER_PARAM = 1;\n    process.env.JAEGER_TAGS = 'KEY1=VALUE1';\n\n    let config = {\n      serviceName: 'test-service-arg',\n      sampler: {\n        type: 'remote',\n        host: 'localhost',\n        port: 8080,\n        refreshIntervalMs: 100,\n      },\n    };\n    let options = {\n      tags: {\n        KEY2: 'VALUE2',\n      },\n    };\n    let tracer = initTracerFromEnv(config, options);\n    assert.equal(tracer._serviceName, 'test-service-arg');\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    assert.equal(tracer._sampler._host, 'localhost');\n    assert.equal(tracer._sampler._port, 8080);\n    assert.equal(tracer._sampler._refreshInterval, 100);\n    assert.equal(tracer._tags['KEY2'], 'VALUE2');\n    tracer.close(done);\n  });\n});\n"]}