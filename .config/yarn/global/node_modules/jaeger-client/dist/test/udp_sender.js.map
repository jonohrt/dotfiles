{"version":3,"sources":["../../test/udp_sender.js"],"names":["PORT","HOST","describe","server","tracer","thrift","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","createSocket","bind","reporter","setProcess","_process","entryPoint","join","__dirname","allowOptionalArguments","allowFilesystemAccess","afterEach","close","assertCallback","expectedNumSpans","expectedError","numSpans","error","it","startSpan","finish","spanToThrift","maxSpanBytes","_calcSpanSize","length","_maxSpanBytes","on","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","value","body","isOk","spans","process","serviceName","actualTags","sortBy","tags","o","key","done","append","undefined","flush","parentContext","context","childOfContext","childOfRef","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","options","childOf","expectedTraceId","expectedParentId","traceId","parentId","each","span","tSpan","isNotOk","spanSize","_batch","_totalSpanBytes","spanThatExceedsCapacity","setTag","largeSpanSize","err","to","have","string","_logger","_host","expectLogs","satisfies","version","info","console","log"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport { Thrift } from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\n\nconst PORT = 6832;\nconst HOST = '127.0.0.1';\n\ndescribe('udp sender', () => {\n  let server;\n  let tracer;\n  let thrift;\n  let sender;\n\n  function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n    assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n    assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n    assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n    assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n    assert.equal(spanOne.operationName, spanTwo.operationName);\n    assert.deepEqual(spanOne.references, spanTwo.references);\n    assert.equal(spanOne.flags, spanTwo.flags);\n    assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n    assert.deepEqual(spanOne.duration, spanTwo.duration);\n  }\n\n  beforeEach(() => {\n    server = dgram.createSocket('udp4');\n    server.bind(PORT, HOST);\n    let reporter = new InMemoryReporter();\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    sender = new UDPSender();\n    sender.setProcess(reporter._process);\n    thrift = new Thrift({\n      entryPoint: path.join(__dirname, '../src/thriftrw-idl/agent.thrift'),\n      allowOptionalArguments: true,\n      allowFilesystemAccess: true,\n    });\n  });\n\n  afterEach(() => {\n    tracer.close();\n    server.close();\n  });\n\n  function assertCallback(expectedNumSpans, expectedError): SenderCallback {\n    return (numSpans, error) => {\n      assert.equal(numSpans, expectedNumSpans);\n      assert.equal(error, expectedError);\n    };\n  }\n\n  it('should read and verify spans and process sent', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanTwo = tracer.startSpan('operation-two');\n    spanTwo.finish(); // finish to set span duration\n    spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n    // make sure sender can fit both spans\n    let maxSpanBytes = sender._calcSpanSize(spanOne).length + sender._calcSpanSize(spanTwo).length + 30;\n    sender._maxSpanBytes = maxSpanBytes;\n\n    server.on('message', (msg, remote) => {\n      let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n      let batch = thriftObj.value.body.batch;\n      assert.isOk(batch);\n      assert.equal(batch.spans.length, 2);\n\n      assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n      assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n      assert.equal(batch.process.serviceName, 'test-service-name');\n      let actualTags = _.sortBy(batch.process.tags, o => {\n        return o.key;\n      });\n      assert.equal(actualTags.length, 4);\n      assert.equal(actualTags[0].key, 'client-uuid');\n      assert.equal(actualTags[1].key, 'ip');\n      assert.equal(actualTags[2].key, 'jaeger.hostname');\n      assert.equal(actualTags[3].key, 'jaeger.version');\n\n      sender.close();\n      done();\n    });\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanTwo, assertCallback(0, undefined));\n    sender.flush(assertCallback(2, undefined));\n  });\n\n  describe('span reference tests', () => {\n    let tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(true));\n    let parentContext = tracer.startSpan('just-used-for-context').context();\n    let childOfContext = tracer.startSpan('just-used-for-context').context();\n    let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    let followsFromContext = tracer.startSpan('just-used-for-context').context();\n    let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    let options = [\n      { childOf: null, references: [], expectedTraceId: null, expectedParentId: null },\n      {\n        childOf: null,\n        references: [childOfRef, followsFromRef],\n        expectedTraceId: childOfContext.traceId,\n        expectedParentId: childOfContext.parentId,\n      },\n    ];\n\n    _.each(options, o => {\n      it('should serialize span references', done => {\n        let span = tracer.startSpan('bender', {\n          childOf: o.childOf,\n          references: o.references,\n        });\n        span.finish();\n        const tSpan = ThriftUtils.spanToThrift(span);\n\n        server.on('message', function(msg, remote) {\n          let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n          let batch = thriftObj.value.body.batch;\n\n          assert.isOk(batch);\n          assertThriftSpanEqual(assert, tSpan, batch.spans[0]);\n          if (o.expectedTraceId) {\n            assert.deepEqual(batch.spans[0].traceIdLow, o.expectedTraceId);\n          }\n\n          if (o.expectedParentId) {\n            assert.deepEqual(batch.spans[0].parentId, o.expectedParentId);\n          } else {\n            assert.isNotOk(batch.spans[0].parentId);\n          }\n\n          sender.close();\n          done();\n        });\n\n        sender.append(tSpan);\n        sender.flush();\n      });\n    });\n  });\n\n  it('should flush spans when capacity is reached', () => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanSize = sender._calcSpanSize(spanOne).length;\n    sender._maxSpanBytes = spanSize * 2;\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanOne, assertCallback(2, undefined));\n\n    assert.equal(sender._batch.spans.length, 0);\n    assert.equal(sender._totalSpanBytes, 0);\n  });\n\n  it('should flush spans when just over capacity', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanSize = sender._calcSpanSize(spanOne).length;\n    sender._maxSpanBytes = spanSize * 2;\n\n    let spanThatExceedsCapacity = tracer.startSpan('bigger-span');\n    spanThatExceedsCapacity.setTag('some-key', 'some-value');\n    spanThatExceedsCapacity.finish(); // finish to set span duration\n    spanThatExceedsCapacity = ThriftUtils.spanToThrift(spanThatExceedsCapacity);\n    let largeSpanSize = sender._calcSpanSize(spanThatExceedsCapacity).length;\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanThatExceedsCapacity, (numSpans, error) => {\n      assert.equal(numSpans, 1);\n      assert.equal(error, undefined);\n\n      assert.equal(sender._batch.spans.length, 1);\n      assert.equal(sender._totalSpanBytes, largeSpanSize);\n      done();\n    });\n  });\n\n  it('should returns error from flush() on failed buffer conversion', done => {\n    let span = tracer.startSpan('leela');\n    span.finish(); // finish to set span duration\n    span = ThriftUtils.spanToThrift(span);\n    span.flags = 'string'; // malform the span to create a serialization error\n    sender.append(span);\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error writing Thrift object:');\n      done();\n    });\n  });\n\n  it('should return error upon thrift conversion failure', done => {\n    sender._logger = {\n      error: msg => {\n        expect(msg).to.have.string('error converting span to Thrift:');\n        done();\n      },\n    };\n    let span = tracer.startSpan(undefined);\n    span.finish();\n\n    sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error converting span to Thrift:');\n      done();\n    });\n  });\n\n  it('should return error on span too large', done => {\n    let span = tracer.startSpan('op-name');\n    span.finish(); // otherwise duration will be undefined\n\n    sender._maxSpanBytes = 1;\n    sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('is larger than maxSpanSize');\n      done();\n    });\n  });\n\n  it('should return 0,undefined on flush() with no spans', () => {\n    sender.flush(assertCallback(0, undefined));\n  });\n\n  it('should gracefully handle errors emitted by socket.send', done => {\n    let tracer = new Tracer('test-service-name', new RemoteReporter(sender), new ConstSampler(true));\n    sender._host = 'foo.bar.xyz';\n    // In Node 0.10 and 0.12 the error is logged twice: (1) from inline callback, (2) from on('error') handler.\n    let expectLogs = semver.satisfies(process.version, '0.10.x || 0.12.x');\n    sender._logger = {\n      info: msg => {\n        console.log('sender info: ' + msg);\n      },\n      error: msg => {\n        assert.isOk(expectLogs);\n        expect(msg).to.have.string('error sending spans over UDP: Error: getaddrinfo ENOTFOUND');\n        tracer.close(done);\n      },\n    };\n    tracer.startSpan('testSpan').finish();\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error sending spans over UDP: Error: getaddrinfo ENOTFOUND');\n      if (!expectLogs) {\n        tracer.close(done);\n      }\n    });\n  });\n});\n"]}