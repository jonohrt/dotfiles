{"version":3,"sources":["../../../test/samplers/remote_sampler.js"],"names":["describe","server","logger","metrics","remoteSampler","before","start","after","close","beforeEach","clearConfigs","refreshInterval","afterEach","it","samplerQueryFailure","increment","equal","_errorMsgs","length","done","_port","_refreshSamplingStrategy","badResponses","forEach","resp","samplerUpdateFailure","addStrategy","_serviceName","_onSamplerUpdate","s","_samplingRate","counterValue","samplerRetrieved","samplerUpdated","firstSampler","strictEqual","strategyType","probabilisticSampling","samplingRate","maxTracesPerSecond","isOk","rateLimitingSampling","rateLimitingSampler","_sampler","operationSampling","defaultSamplingProbability","defaultLowerBoundTracesPerSecond","perOperationStrategies","s2","clock","useFakeTimers","sampler","onSamplerUpdate","notEqual","isTrue","toString","restore","tick"],"mappings":"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","file":"remote_sampler.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport sinon from 'sinon';\nimport Metrics from '../../src/metrics/metrics.js';\nimport RateLimitingSampler from '../../src/samplers/ratelimiting_sampler';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler';\nimport RemoteSampler from '../../src/samplers/remote_sampler';\nimport MockLogger from '../lib/mock_logger';\nimport ConfigServer from '../lib/config_server';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\n\ndescribe('RemoteSampler', () => {\n  let server: ConfigServer;\n  let logger: MockLogger;\n  let metrics: Metrics;\n  let remoteSampler: RemoteSampler;\n\n  before(() => {\n    server = new ConfigServer().start();\n  });\n\n  after(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    server.clearConfigs();\n    logger = new MockLogger();\n    metrics = new Metrics(new LocalMetricFactory());\n    remoteSampler = new RemoteSampler('service1', {\n      refreshInterval: 0,\n      metrics: metrics,\n      logger: logger,\n    });\n  });\n\n  afterEach(() => {\n    remoteSampler.close();\n  });\n\n  it('should log metric on failing to query for sampling strategy', done => {\n    metrics.samplerQueryFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    remoteSampler._port = 1; // Nothing running on this port, should error\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  let badResponses: Array<any> = ['junk', '0', 'false', {}];\n  badResponses.forEach(resp => {\n    it(`should log metric on failing to parse bad http response ${resp}`, done => {\n      metrics.samplerUpdateFailure.increment = function() {\n        assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n        done();\n      };\n      server.addStrategy('service1', resp);\n      remoteSampler._refreshSamplingStrategy();\n    });\n  });\n\n  it('should throw error on bad sampling strategy', done => {\n    metrics.samplerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1);\n      done();\n    };\n    remoteSampler._serviceName = 'bad-service';\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set probabilistic sampler, but only once', done => {\n    remoteSampler._onSamplerUpdate = s => {\n      assert.equal(s._samplingRate, 1.0);\n      assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 1);\n      assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n      let firstSampler = s;\n\n      // prepare for second update\n      remoteSampler._onSamplerUpdate = s => {\n        assert.strictEqual(s, firstSampler, 'must not have changed the sampler');\n\n        assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 2);\n        assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n        // prepare for third update - for test coverage only\n        remoteSampler._onSamplerUpdate = null;\n        remoteSampler._refreshSamplingStrategy();\n\n        done();\n      };\n\n      remoteSampler._refreshSamplingStrategy();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 1.0,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set ratelimiting sampler', done => {\n    let maxTracesPerSecond = 10;\n    remoteSampler._onSamplerUpdate = s => {\n      assert.isOk(s.equal(new RateLimitingSampler(maxTracesPerSecond)));\n      done();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'RATE_LIMITING',\n      rateLimitingSampling: {\n        maxTracesPerSecond: maxTracesPerSecond,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should update ratelimiting sampler', done => {\n    let rateLimitingSampler = new RateLimitingSampler(10);\n    remoteSampler._sampler = rateLimitingSampler;\n    let maxTracesPerSecond = 5;\n    remoteSampler._onSamplerUpdate = s => {\n      assert.strictEqual(rateLimitingSampler, remoteSampler._sampler);\n      assert.isOk(s.equal(new RateLimitingSampler(maxTracesPerSecond)));\n      done();\n    };\n    server.addStrategy('service1', {\n      strategyType: 'RATE_LIMITING',\n      rateLimitingSampling: {\n        maxTracesPerSecond: maxTracesPerSecond,\n      },\n    });\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should set per-operation sampler', done => {\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 1.0,\n      },\n      operationSampling: {\n        defaultSamplingProbability: 0.05,\n        defaultLowerBoundTracesPerSecond: 0.1,\n        perOperationStrategies: [],\n      },\n    });\n    remoteSampler._onSamplerUpdate = s => {\n      assert.isOk(s instanceof PerOperationSampler);\n      assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 1);\n      assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1);\n\n      // cause a second refresh without changes\n      remoteSampler._onSamplerUpdate = s2 => {\n        assert.strictEqual(s2, s);\n        assert.equal(LocalBackend.counterValue(metrics.samplerRetrieved), 2, 'second retrieval');\n        assert.equal(LocalBackend.counterValue(metrics.samplerUpdated), 1, 'but no update');\n        done();\n      };\n      remoteSampler._refreshSamplingStrategy();\n    };\n    remoteSampler._refreshSamplingStrategy();\n  });\n\n  it('should refresh periodically', done => {\n    server.addStrategy('service1', {\n      strategyType: 'PROBABILISTIC',\n      probabilisticSampling: {\n        samplingRate: 0.777,\n      },\n    });\n\n    let clock: any = sinon.useFakeTimers();\n\n    let sampler = new RemoteSampler('service1', {\n      refreshInterval: 10, // 10ms\n      metrics: metrics,\n      logger: logger,\n      onSamplerUpdate: s => {\n        assert.notEqual(LocalBackend.counterValue(metrics.samplerRetrieved), 0);\n        assert.notEqual(LocalBackend.counterValue(metrics.samplerUpdated), 0);\n        assert.equal(logger._errorMsgs.length, 0, 'number of error logs');\n        assert.isTrue(sampler._sampler.equal(new ProbabilisticSampler(0.777)), sampler._sampler.toString());\n\n        clock.restore();\n\n        sampler._onSamplerUpdate = null;\n        sampler.close(done);\n      },\n    });\n\n    clock.tick(20);\n  });\n});\n"]}