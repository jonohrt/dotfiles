{"version":3,"sources":["../../../test/samplers/all_samplers.js"],"names":["constants","describe","samplers","useCallback","sampler","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","forEach","o","it","description","closeCallback","spy","close","calledOnce","type","SAMPLER_TYPE_CONST","param","decision","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_TYPE_RATE_LIMITING","samplerSetup","toString","expectedTags","expectedDecision","SAMPLER_TYPE_TAG_KEY","SAMPLER_PARAM_TAG_KEY","actualTags","isSampled","equal","deepEqual","before","isOk","otherSampler","isNotOk","to","throw","tags"],"mappings":";;AAaA;;AACA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaAC,SAAS,cAAT,EAAyB,YAAM;AAC7BA,WAAS,wBAAT,EAAmC,YAAM;AACvC,QAAIC,WAAW,4BAAa;AAC1BC,mBAAa,CAAC,IAAD,EAAO,KAAP,CADa;AAE1BC,eAAS,CACP,4BAAiB,IAAjB,CADO,EAEP,4BAAiB,KAAjB,CAFO,EAGP,oCAAyB,GAAzB,CAHO,EAIP,mCAAwB,CAAxB,CAJO,EAKP,4CAAgC,CAAhC,EAAmC,GAAnC,CALO,EAMP,oCACE;AACEC,0CAAkC,CADpC;AAEEC,oCAA4B,IAF9B;AAGEC,gCAAwB;AAH1B,OADF,EAME,GANF,CANO,EAcP,6BAAkB,mBAAlB,CAdO;AAFiB,KAAb,CAAf;;AAoBAL,aAASM,OAAT,CAAiB,UAACC,CAAD,EAAY;AAC3BC,SAAGD,EAAEE,WAAL,EAAkB,YAAM;AACtB,YAAIF,EAAEN,WAAN,EAAmB;AACjB,cAAIS,gBAAgB,gBAAMC,GAAN,EAApB;AACAJ,YAAEL,OAAF,CAAUU,KAAV,CAAgBF,aAAhB;AACA,4BAAOA,cAAcG,UAArB;AACD,SAJD,MAIO;AACLN,YAAEL,OAAF,CAAUU,KAAV;AACD;AACF,OARD;AASD,KAVD;AAWD,GAhCD;;AAkCAb,WAAS,4BAAT,EAAuC,YAAM;AAC3C,QAAIC,WAAW,CACb,EAAEE,SAAS,4BAAiB,IAAjB,CAAX,EAAmCY,MAAMhB,UAAUiB,kBAAnD,EAAuEC,OAAO,IAA9E,EAAoFC,UAAU,IAA9F,EADa,EAEb,EAAEf,SAAS,4BAAiB,KAAjB,CAAX,EAAoCY,MAAMhB,UAAUiB,kBAApD,EAAwEC,OAAO,KAA/E,EAAsFC,UAAU,KAAhG,EAFa,EAGb;AACEf,eAAS,oCAAyB,GAAzB,CADX;AAEEY,YAAMhB,UAAUoB,0BAFlB;AAGEF,aAAO,GAHT;AAIEC,gBAAU;AAJZ,KAHa,EASb;AACEf,eAAS,mCAAwB,MAAxB,EAAgC,CAAhC,CADX;AAEEY,YAAMhB,UAAUqB,0BAFlB;AAGEH,aAAO,MAHT;AAIEC,gBAAU;AAJZ,KATa,EAeb;AACEf,eAAS,6BAAkB,kBAAlB,EAAsC,EAAEA,SAAS,oCAAyB,GAAzB,CAAX,EAAtC,CADX;AAEEY,YAAMhB,UAAUoB,0BAFlB;AAGEF,aAAO,GAHT;AAIEC,gBAAU;AAJZ,KAfa,CAAf;;AAuBAjB,aAASM,OAAT,CAAiB,UAACc,YAAD,EAAuB;AACtC,UAAIlB,UAAUkB,aAAa,SAAb,CAAd;AACAZ,SAAGN,QAAQmB,QAAR,EAAH,EAAuB,YAAM;AAC3B,YAAIC,eAAe,EAAnB;AACA,YAAIC,mBAAmB,CAAC,CAACH,aAAa,UAAb,CAAzB;AACA,YAAIX,cAAiBP,QAAQmB,QAAR,EAAjB,gBAA8CD,aAAa,OAAb,CAAlD;;AAEA,YAAIG,gBAAJ,EAAsB;AACpBD,uBAAaxB,UAAU0B,oBAAvB,IAA+CJ,aAAa,MAAb,CAA/C;AACAE,uBAAaxB,UAAU2B,qBAAvB,IAAgDL,aAAa,OAAb,CAAhD;AACD;AACD,YAAIM,aAAa,EAAjB;AACA,YAAIT,WAAWf,QAAQyB,SAAR,CAAkB,WAAlB,EAA+BD,UAA/B,CAAf;AACA,qBAAOE,KAAP,CAAaX,QAAb,EAAuBM,gBAAvB,EAAyCd,WAAzC;AACA,qBAAOoB,SAAP,CAAiBH,UAAjB,EAA6BJ,YAA7B,EAA2Cb,WAA3C;AACD,OAbD;AAcD,KAhBD;AAiBD,GAzCD;AA0CD,CA7ED;;AA+EAV,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAIG,gBAAJ;AACA4B,SAAO,YAAM;AACX5B,cAAU,4BAAiB,IAAjB,CAAV;AACD,GAFD;;AAIAM,KAAG,mCAAH,EAAwC,YAAM;AAC5C,iBAAOuB,IAAP,CAAY7B,QAAQe,QAApB;AACD,GAFD;;AAIAT,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAIwB,eAAe,oCAAyB,GAAzB,CAAnB;AACA,iBAAOC,OAAP,CAAe/B,QAAQ0B,KAAR,CAAcI,YAAd,CAAf;AACD,GAHD;;AAKAxB,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAIwB,eAAe,4BAAiB,IAAjB,CAAnB;AACA,iBAAOD,IAAP,CAAY7B,QAAQ0B,KAAR,CAAcI,YAAd,CAAZ;AACD,GAHD;AAID,CAnBD;;AAqBAjC,SAAS,sBAAT,EAAiC,YAAM;AACrCS,KAAG,4CAAH,EAAiD,YAAM;AACrD,sBAAO,YAAM;AACX,0CAAyB,GAAzB;AACD,KAFD,EAEG0B,EAFH,CAEMC,KAFN,CAEY,0EAFZ;AAGD,GAJD;;AAMA3B,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAIN,UAAU,oCAAyB,GAAzB,CAAd;AACA,QAAIkC,OAAO,EAAX;AACA,iBAAOH,OAAP,CAAe/B,QAAQyB,SAAR,CAAkB,WAAlB,EAA+BS,IAA/B,CAAf;AACA,iBAAOP,SAAP,CAAiBO,IAAjB,EAAuB,EAAvB;AACD,GALD;;AAOA5B,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAIN,UAAU,oCAAyB,GAAzB,CAAd;AACA,QAAI8B,eAAe,4BAAiB,IAAjB,CAAnB;AACA,iBAAOC,OAAP,CAAe/B,QAAQ0B,KAAR,CAAcI,YAAd,CAAf;AACD,GAJD;AAKD,CAnBD","file":"all_samplers.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert, expect } from 'chai';\nimport sinon from 'sinon';\nimport * as constants from '../../src/constants.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport RateLimitingSampler from '../../src/samplers/ratelimiting_sampler.js';\nimport GuaranteedThroughputSampler from '../../src/samplers/guaranteed_throughput_sampler.js';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler.js';\nimport RemoteSampler from '../../src/samplers/remote_sampler.js';\nimport combinations from '../lib/combinations.js';\n\ndescribe('All samplers', () => {\n  describe('should support close()', () => {\n    let samplers = combinations({\n      useCallback: [true, false],\n      sampler: [\n        new ConstSampler(true),\n        new ConstSampler(false),\n        new ProbabilisticSampler(0.5),\n        new RateLimitingSampler(2),\n        new GuaranteedThroughputSampler(2, 0.5),\n        new PerOperationSampler(\n          {\n            defaultLowerBoundTracesPerSecond: 2,\n            defaultSamplingProbability: 0.01,\n            perOperationStrategies: [],\n          },\n          200\n        ),\n        new RemoteSampler('some-service-name'),\n      ],\n    });\n\n    samplers.forEach((o: any) => {\n      it(o.description, () => {\n        if (o.useCallback) {\n          let closeCallback = sinon.spy();\n          o.sampler.close(closeCallback);\n          assert(closeCallback.calledOnce);\n        } else {\n          o.sampler.close();\n        }\n      });\n    });\n  });\n\n  describe('should return correct tags', () => {\n    var samplers = [\n      { sampler: new ConstSampler(true), type: constants.SAMPLER_TYPE_CONST, param: true, decision: true },\n      { sampler: new ConstSampler(false), type: constants.SAMPLER_TYPE_CONST, param: false, decision: false },\n      {\n        sampler: new ProbabilisticSampler(1.0),\n        type: constants.SAMPLER_TYPE_PROBABILISTIC,\n        param: 1.0,\n        decision: true,\n      },\n      {\n        sampler: new RateLimitingSampler(0.0001, 0),\n        type: constants.SAMPLER_TYPE_RATE_LIMITING,\n        param: 0.0001,\n        decision: false,\n      },\n      {\n        sampler: new RemoteSampler('some-caller-name', { sampler: new ProbabilisticSampler(1.0) }),\n        type: constants.SAMPLER_TYPE_PROBABILISTIC,\n        param: 1.0,\n        decision: true,\n      },\n    ];\n\n    samplers.forEach((samplerSetup: any) => {\n      let sampler = samplerSetup['sampler'];\n      it(sampler.toString(), () => {\n        let expectedTags = {};\n        let expectedDecision = !!samplerSetup['decision'];\n        let description = `${sampler.toString()}, param=${samplerSetup['param']}`;\n\n        if (expectedDecision) {\n          expectedTags[constants.SAMPLER_TYPE_TAG_KEY] = samplerSetup['type'];\n          expectedTags[constants.SAMPLER_PARAM_TAG_KEY] = samplerSetup['param'];\n        }\n        let actualTags = {};\n        let decision = sampler.isSampled('operation', actualTags);\n        assert.equal(decision, expectedDecision, description);\n        assert.deepEqual(actualTags, expectedTags, description);\n      });\n    });\n  });\n});\n\ndescribe('ConstSampler', () => {\n  let sampler;\n  before(() => {\n    sampler = new ConstSampler(true);\n  });\n\n  it('decision reflects given parameter', () => {\n    assert.isOk(sampler.decision);\n  });\n\n  it('does NOT equal another type of sampler', () => {\n    let otherSampler = new ProbabilisticSampler(0.5);\n    assert.isNotOk(sampler.equal(otherSampler));\n  });\n\n  it('does equal the same type of sampler', () => {\n    let otherSampler = new ConstSampler(true);\n    assert.isOk(sampler.equal(otherSampler));\n  });\n});\n\ndescribe('ProbabilisticSampler', () => {\n  it('throws error on out of range sampling rate', () => {\n    expect(() => {\n      new ProbabilisticSampler(2.0);\n    }).to.throw('The sampling rate must be less than 0.0 and greater than 1.0. Received 2');\n  });\n\n  it('calls is Sampled, and returns false', () => {\n    let sampler = new ProbabilisticSampler(0.0);\n    let tags = {};\n    assert.isNotOk(sampler.isSampled('operation', tags));\n    assert.deepEqual(tags, {});\n  });\n\n  it('does NOT equal another type of sampler', () => {\n    let sampler = new ProbabilisticSampler(0.0);\n    let otherSampler = new ConstSampler(true);\n    assert.isNotOk(sampler.equal(otherSampler));\n  });\n});\n"]}