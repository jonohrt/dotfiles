{"version":3,"sources":["../../test/tracer.js"],"names":["constants","opentracing","describe","tracer","reporter","beforeEach","afterEach","clear","close","it","ck","mytracer","contextKey","headers","mycontext","extract","FORMAT_HTTP_HEADERS","equal","toString","myspan","startSpan","childOf","context","traceIdStr","exheaders","inject","notEqual","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","spanContext","FORMAT_TEXT_MAP","rootSpan","isOk","traceId","isNotOk","parentId","flags","getBaggageItem","encodeInt64","spanId","withBinaryIds","start","rpcServer","internalTags","references","tags","keyOne","keyTwo","span","_startInternalSpan","deepEqual","_startTime","Object","keys","_tags","length","_report","spans","actualTags","sortBy","o","key","value","startTime","Date","getTime","isSampled","nextId","getId","parentContext","childOfContext","childOfRef","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","testCases","message","spanOptions","verify","forEach","params","finish","baggage","savedContext","SAMPLED_MASK","assertByFormat","carrier","format","extractedContext","to","throw","throttler","setProcess","spy","debugThrottler","_process","serviceName","isString","uuid","assert","calledWith","calledOnce","sampled","metrics","each","fromString","Tags","SPAN_KIND","SPAN_KIND_RPC_SERVER","counterEquals","metricName","spansFinished"],"mappings":"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","file":"tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport * as opentracing from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport sinon from 'sinon';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('tracer should', () => {\n  let tracer;\n  let reporter = new InMemoryReporter();\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n  });\n\n  afterEach(() => {\n    reporter.clear();\n    tracer.close();\n  });\n\n  it('be able to override codec contextKey and extract context', () => {\n    let ck = 'test-trace-id';\n    let mytracer = new Tracer('test-service-name', reporter, new ConstSampler(true), {\n      contextKey: ck,\n    });\n\n    let headers = {\n      'test-trace-id': 'a:b:c:d',\n    };\n\n    let mycontext = mytracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.equal(mycontext.toString(), headers[ck]);\n\n    let myspan = mytracer.startSpan('myspan', { childOf: mycontext });\n    assert.equal(myspan.context().traceIdStr, 'a');\n\n    let exheaders = {};\n\n    mytracer.inject(myspan.context(), opentracing.FORMAT_HTTP_HEADERS, exheaders);\n    assert.notEqual(exheaders[ck], null);\n  });\n\n  it('begin a new span given only baggage headers', () => {\n    // Users sometimes want to pass baggage even if there is no span.\n    // In this case we must ensure a new root span is created.\n    let headers = {};\n    // combine normal baggage encoding\n    headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'robot'] = 'Bender';\n    // with custom encoding via `jaeger-baggage` header\n    headers[constants.JAEGER_BAGGAGE_HEADER] = 'male=Fry, female=Leela, Lord Nibbler';\n    let spanContext = tracer.extract(opentracing.FORMAT_TEXT_MAP, headers);\n    let rootSpan = tracer.startSpan('fry', { childOf: spanContext });\n\n    assert.isOk(rootSpan.context().traceId);\n    assert.isNotOk(rootSpan.context().parentId);\n    assert.equal(rootSpan.context().flags, 1);\n    assert.equal('Bender', rootSpan.getBaggageItem('robot'));\n    assert.equal('Leela', rootSpan.getBaggageItem('female'));\n    assert.equal('Fry', rootSpan.getBaggageItem('male'));\n  });\n\n  it('create a span correctly through _startInternalSpan', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let start = 123.456;\n    let rpcServer = false;\n    let internalTags = [];\n    let references = [];\n    let tags = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let span = tracer._startInternalSpan(\n      context,\n      'op-name',\n      start,\n      internalTags,\n      tags,\n      null,\n      rpcServer,\n      references\n    );\n\n    assert.deepEqual(span.context().traceId, traceId);\n    assert.deepEqual(span.context().spanId, spanId);\n    assert.deepEqual(span.context().parentId, parentId);\n    assert.equal(span.context().flags, flags);\n    assert.equal(span._startTime, start);\n    assert.equal(Object.keys(span._tags).length, 2);\n  });\n\n  it('report a span with no tracer level tags', () => {\n    let span = tracer.startSpan('op-name');\n    tracer._report(span);\n    assert.isOk(reporter.spans.length, 1);\n    let actualTags = _.sortBy(span._tags, o => {\n      return o.key;\n    });\n\n    assert.equal(2, actualTags.length);\n    assert.equal(actualTags[0].key, 'sampler.param');\n    assert.equal(actualTags[1].key, 'sampler.type');\n    assert.equal(actualTags[0].value, true);\n    assert.equal(actualTags[1].value, 'const');\n  });\n\n  it('start a root span with proper structure', () => {\n    let startTime = new Date(2016, 8, 18).getTime();\n    let span = tracer.startSpan('test-name', {\n      startTime: startTime,\n    });\n\n    assert.equal(span.context().traceId, span.context().spanId);\n    assert.isNotOk(span.context().parentId);\n    assert.isOk(span.context().isSampled());\n    assert.equal(span._startTime, startTime);\n  });\n\n  describe('start a child span represented as a separate span from parent, using childOf and references', () => {\n    let nextId = 0;\n    const getId = () => Utils.encodeInt64(nextId++);\n    const traceId = getId();\n    const flags = 1;\n\n    const parentContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const childOfContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    const followsFromContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    const testCases = [\n      {\n        message: 'starts a span based on childOf',\n        spanOptions: {\n          childOf: parentContext,\n          references: [],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span based on childOf, ignoring FOLLOWS_FROM',\n        spanOptions: {\n          childOf: parentContext,\n          references: [followsFromRef],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span based on childOf, ignoring CHILD_OF and FOLLOWS_FROM',\n        spanOptions: {\n          childOf: parentContext,\n          references: [childOfRef, followsFromRef],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the CHILD_OF ref',\n        spanOptions: {\n          childOf: null,\n          references: [childOfRef],\n        },\n        verify: childOfContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the FOLLOWS_FROM ref',\n        spanOptions: {\n          childOf: null,\n          references: [followsFromRef],\n        },\n        verify: followsFromContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the CHILD_OF ref and ignoring FOLLOWS_FROM',\n        spanOptions: {\n          childOf: null,\n          references: [childOfRef, followsFromRef],\n        },\n        verify: childOfContext,\n      },\n    ];\n\n    testCases.forEach(params => {\n      const { message, spanOptions, verify } = params;\n      it(message, () => {\n        let span = tracer.startSpan('bender', {\n          childOf: spanOptions.childOf,\n          references: spanOptions.references,\n        });\n        span.finish();\n        assert.deepEqual(span.context().traceId, verify.traceId);\n        assert.deepEqual(span.context().parentId, verify.spanId);\n      });\n    });\n  });\n\n  it('inject plain text headers into carrier, and extract span context with the same value', () => {\n    let keyOne = 'keyOne';\n    let keyTwo = 'keyTwo';\n    let baggage = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n\n    let assertByFormat = format => {\n      let carrier = {};\n      tracer.inject(savedContext, format, carrier);\n      let extractedContext = tracer.extract(format, carrier);\n\n      assert.deepEqual(savedContext.traceId, extractedContext.traceId);\n      assert.deepEqual(savedContext.spanId, extractedContext.spanId);\n      assert.deepEqual(savedContext.parentId, extractedContext.parentId);\n      assert.equal(savedContext.flags, extractedContext.flags);\n      assert.equal(savedContext.baggage[keyOne], extractedContext.baggage[keyOne]);\n      assert.equal(savedContext.baggage[keyTwo], extractedContext.baggage[keyTwo]);\n    };\n\n    assertByFormat(opentracing.FORMAT_TEXT_MAP);\n    assertByFormat(opentracing.FORMAT_HTTP_HEADERS);\n  });\n\n  it('inject url encoded values into headers', () => {\n    let baggage = {\n      keyOne: 'Leela vs. Bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n    let carrier = {};\n\n    tracer.inject(savedContext, opentracing.FORMAT_HTTP_HEADERS, carrier);\n    assert.equal(carrier['uberctx-keyOne'], 'Leela%20vs.%20Bender');\n  });\n\n  it('assert inject and extract throw errors when given an invalid format', () => {\n    let carrier = {};\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    // subtle but expect wants a function to call not the result of a function call.\n    expect(() => {\n      tracer.inject(context, 'fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n    expect(() => {\n      tracer.extract('fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n  });\n\n  it('report spans', () => {\n    let span = tracer.startSpan('operation');\n    tracer._report(span);\n\n    assert.equal(reporter.spans.length, 1);\n  });\n\n  it('set _process on initialization', () => {\n    const throttler = new DefaultThrottler();\n    throttler.setProcess = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    assert.equal(tracer._process.serviceName, 'x');\n    assert.isString(tracer._process.uuid);\n    sinon.assert.calledWith(throttler.setProcess, tracer._process);\n  });\n\n  it('close _debugThrottler on close', () => {\n    const throttler = new DefaultThrottler();\n    throttler.close = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    tracer.close();\n    sinon.assert.calledOnce(throttler.close);\n  });\n\n  describe('Metrics', () => {\n    it('startSpan', () => {\n      let params = [\n        {\n          rpcServer: false,\n          context: null,\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesStartedSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:1',\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesJoinedSampled'],\n        },\n        {\n          rpcServer: false,\n          context: null,\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesStartedNotSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:0',\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesJoinedNotSampled'],\n        },\n      ];\n\n      _.each(params, o => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(o.sampled), {\n          metrics: metrics,\n        });\n\n        let context = null;\n        if (o.context) {\n          context = SpanContext.fromString(o.context);\n        }\n\n        let tags = {};\n        if (o.rpcServer) {\n          tags[opentracing.Tags.SPAN_KIND] = opentracing.Tags.SPAN_KIND_RPC_SERVER;\n        }\n\n        tracer.startSpan('bender', {\n          childOf: context,\n          tags: tags,\n        });\n\n        _.each(o.metrics, metricName => {\n          assert.isOk(LocalBackend.counterEquals(metrics[metricName], 1));\n        });\n      });\n    });\n\n    it('emits counter when report called', () => {\n      let metrics = new Metrics(new LocalMetricFactory());\n      tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(true), {\n        metrics: metrics,\n      });\n      let span = tracer.startSpan('bender');\n      tracer._report(span);\n\n      assert.isOk(LocalBackend.counterEquals(metrics.spansFinished, 1));\n    });\n  });\n});\n"]}