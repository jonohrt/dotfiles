{"version":3,"sources":["../../../crossdock/test/http_server.js"],"names":["process","env","NODE_ENV","describe","server","before","it","sampled","baggage","host","startRequest","serverRole","downstream","serviceName","port","transport","setTimeout","headers","post","url","forever","body","JSON","stringify","err","response","console","log","isNotOk","traceResponse","parse","isOk","span","traceId","equal","notImplementedError","done","timeout","joinRequest"],"mappings":"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","file":"http_server.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport HttpServer from '../src/http_server.js';\nimport request from 'request';\n\nprocess.env.NODE_ENV = 'test';\n\ndescribe('crossdock http server should', () => {\n  let server;\n  before(() => {\n    server = new HttpServer();\n  });\n\n  it('return proper trace response for start_request, and join_trace combined', done => {\n    let sampled = true;\n    let baggage = '7e859ffef96e5da6';\n    let host = '127.0.0.1';\n    let startRequest = {\n      serverRole: 'S1',\n      sampled: sampled,\n      baggage: baggage,\n      downstream: {\n        serviceName: 'node',\n        serverRole: 'S2',\n        host: host,\n        port: '8081',\n        transport: 'HTTP',\n        downstream: {\n          serviceName: 'node',\n          serverRole: 'S3',\n          host: host,\n          port: '8081',\n          transport: 'HTTP',\n        },\n      },\n    };\n\n    setTimeout(() => {\n      let headers = { 'Content-Type': 'application/json' };\n      request.post(\n        {\n          url: 'http://127.0.0.1:8081/start_trace',\n          forever: true,\n          headers: headers,\n          body: JSON.stringify(startRequest),\n        },\n        (err, response) => {\n          if (err) {\n            console.log('err', err);\n          }\n\n          // top level span\n          assert.isNotOk(err);\n          let traceResponse = JSON.parse(response.body);\n          assert.isOk(traceResponse.span.traceId);\n          assert.equal(traceResponse.span.sampled, true);\n          assert.equal(traceResponse.span.baggage, '7e859ffef96e5da6');\n\n          // downstream level 1\n          assert.isOk(traceResponse.downstream);\n          assert.equal(traceResponse.notImplementedError, '');\n          assert.equal(traceResponse.span.traceId, traceResponse.downstream.span.traceId);\n          assert.equal(traceResponse.downstream.span.sampled, true);\n          assert.equal(traceResponse.downstream.span.baggage, '7e859ffef96e5da6');\n          assert.equal(traceResponse.downstream.notImplementedError, '');\n\n          // downstream level 2\n          assert.isOk(traceResponse.downstream.downstream);\n          assert.equal(\n            traceResponse.downstream.span.traceId,\n            traceResponse.downstream.downstream.span.traceId\n          );\n          assert.equal(traceResponse.downstream.downstream.notImplementedError, '');\n          assert.isOk(traceResponse.downstream.downstream.span.sampled, true);\n          assert.isOk(traceResponse.downstream.downstream.span.baggage, '7e859ffef96e5da6');\n          done();\n        }\n      );\n    }, 3000);\n  }).timeout(5000);\n\n  it('return proper trace response for start_request', done => {\n    let sampled = true;\n    let baggage = '7e859ffef96e5da6';\n    let host = '127.0.0.1';\n    let startRequest = {\n      serverRole: 'S1',\n      sampled: sampled,\n      baggage: baggage,\n    };\n\n    let headers = { 'Content-Type': 'application/json' };\n    request.post(\n      {\n        url: 'http://127.0.0.1:8081/start_trace',\n        forever: true,\n        headers: headers,\n        body: JSON.stringify(startRequest),\n      },\n      (err, response) => {\n        if (err) {\n          console.log('err', err);\n        }\n        assert.isNotOk(err);\n        let traceResponse = JSON.parse(response.body);\n        assert.equal(traceResponse.span.sampled, true);\n        assert.equal(traceResponse.span.baggage, '7e859ffef96e5da6');\n        assert.equal(traceResponse.notImplementedError, '');\n        done();\n      }\n    );\n  });\n\n  it('return proper trace response for join_request', done => {\n    let sampled = true;\n    let baggage = '7e859ffef96e5da6';\n    let host = '127.0.0.1';\n    let joinRequest = {\n      serverRole: 'S1',\n    };\n\n    let headers = { 'Content-Type': 'application/json' };\n    request.post(\n      {\n        url: 'http://127.0.0.1:8081/join_trace',\n        forever: true,\n        headers: headers,\n        body: JSON.stringify(joinRequest),\n      },\n      (err, response) => {\n        if (err) {\n          console.log('err', err);\n        }\n\n        assert.isNotOk(err);\n        let traceResponse = JSON.parse(response.body);\n        assert.equal(traceResponse.span.sampled, false);\n        assert.equal(traceResponse.notImplementedError, '');\n        done();\n      }\n    );\n  });\n});\n"]}