{"version":3,"sources":["../../../crossdock/test/tchannel_server.js"],"names":["constants","crossdock_constants","process","env","NODE_ENV","describe","ip","server","tracer","bridge","crossdockSpecPath","join","__dirname","before","myIp","it","span","startSpan","setBaggageItem","BAGGAGE_KEY","clientChannel","requestChannel","makeSubChannel","serviceName","peers","thriftChannel","channel","entryPoint","tracedChannel","joinRequest","serverRole","downstream","host","port","transport","context","setSpan","request","timeout","headers","cn","send","err","res","isNotOk","traceResponse","body","equal","traceId","traceIdStr","sampled","baggage","getBaggageItem","done"],"mappings":"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","file":"tchannel_server.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert } from 'chai';\nimport * as constants from '../../src/constants';\nimport * as crossdock_constants from '../src/constants';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultContext from '../../src/default_context';\nimport opentracing from 'opentracing';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport TChannelBridge from '../../src/tchannel_bridge';\nimport TChannelServer from '../src/tchannel_server.js';\nimport TChannelAsThrift from 'tchannel/as/thrift';\nimport TChannel from 'tchannel';\nimport Tracer from '../../src/tracer.js';\nimport fs from 'fs';\nimport path from 'path';\nimport Utils from '../../src/util.js';\n\nprocess.env.NODE_ENV = 'test';\n\n// WARNING THESE TESTS DO NOT WORK WHEN THE VPN IS RUNNING.\n\ndescribe('crossdock tchannel server should', () => {\n  let ip;\n  let server;\n  let tracer;\n  let bridge;\n  let crossdockSpecPath = path.join(\n    __dirname,\n    '..',\n    '..',\n    'src',\n    'jaeger-idl',\n    'thrift',\n    'crossdock',\n    'tracetest.thrift'\n  );\n\n  before(() => {\n    tracer = new Tracer('node', new InMemoryReporter(), new ConstSampler(false));\n    bridge = new TChannelBridge(tracer);\n    server = new TChannelServer(crossdockSpecPath);\n    ip = Utils.myIp();\n  });\n\n  describe('joinTrace with different options', () => {\n    it('propagate span state on tchannel joinTrace', done => {\n      let span = tracer.startSpan('test-span');\n      span.setBaggageItem(crossdock_constants.BAGGAGE_KEY, 'fry');\n\n      let clientChannel = new TChannel();\n\n      let requestChannel = clientChannel.makeSubChannel({\n        serviceName: 'node',\n        peers: [Utils.myIp() + ':8082'],\n      });\n      let thriftChannel = TChannelAsThrift({\n        channel: requestChannel,\n        entryPoint: crossdockSpecPath,\n      });\n      let tracedChannel = bridge.tracedChannel(thriftChannel);\n\n      let joinRequest = {\n        serverRole: 'S1',\n        downstream: {\n          serviceName: 'node',\n          serverRole: 'S2',\n          host: Utils.myIp(),\n          port: '8082',\n          transport: 'TCHANNEL',\n        },\n      };\n\n      let context = new DefaultContext();\n      context.setSpan(span);\n      tracedChannel\n        .request({\n          timeout: 100000,\n          context: context,\n          serviceName: 'node',\n          headers: {\n            cn: 'node-tchannel',\n          },\n        })\n        .send('TracedService::joinTrace', null, { request: joinRequest }, (err, res) => {\n          if (err) {\n            assert.isNotOk(err);\n          } else {\n            let traceResponse = res.body;\n            assert.equal(traceResponse.span.traceId, span.context().traceIdStr);\n            assert.equal(traceResponse.span.traceId, traceResponse.downstream.span.traceId);\n            assert.equal(traceResponse.span.sampled, false);\n            assert.equal(traceResponse.span.baggage, span.getBaggageItem(crossdock_constants.BAGGAGE_KEY));\n          }\n          done();\n        });\n    }).timeout(100000);\n  });\n});\n"]}