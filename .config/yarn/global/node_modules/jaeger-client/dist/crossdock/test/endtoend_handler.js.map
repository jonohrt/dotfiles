{"version":3,"sources":["../../../crossdock/test/endtoend_handler.js"],"names":["PORT","HOST","describe","server","thrift","beforeEach","createSocket","bind","entryPoint","join","__dirname","allowOptionalArguments","allowFilesystemAccess","handler","port","host","app","use","json","post","req","res","generateTraces","listen","afterEach","close","it","traceRequest","operation","count","tags","key","headers","url","forever","body","JSON","stringify","err","response","thriftTagsToObject","span","value","forEach","tag","vType","vStr","vDouble","vBool","vLong","vBinary","push","on","address","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","equal","spans","length","_tags","operationName","isOk","hasTags","done"],"mappings":";;AAYA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA,IAAMA,OAAO,IAAb;AACA,IAAMC,OAAO,WAAb;;AAEAC,SAAS,yBAAT,EAAoC,YAAM;AACxC,MAAIC,eAAJ;AACA,MAAIC,eAAJ;;AAEAC,aAAW,YAAM;AACfF,aAAS,gBAAMG,YAAN,CAAmB,MAAnB,CAAT;AACAH,WAAOI,IAAP,CAAYP,IAAZ,EAAkBC,IAAlB;AACAG,aAAS,qBAAW;AAClBI,kBAAY,eAAKC,IAAL,CAAUC,SAAV,EAAqB,qCAArB,CADM;AAElBC,8BAAwB,IAFN;AAGlBC,6BAAuB;AAHL,KAAX,CAAT;;AAMA,QAAIC,UAAU,+BAAoB,EAAEC,MAAMd,IAAR,EAAce,MAAMd,IAApB,EAApB,CAAd;AACA,QAAIe,MAAM,wBAAV;AACAA,QAAIC,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAF,QAAIG,IAAJ,CAAS,gBAAT,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvCR,cAAQS,cAAR,CAAuBF,GAAvB,EAA4BC,GAA5B;AACD,KAFD;;AAIAL,QAAIO,MAAJ,CAAW,IAAX,EAAiB,YAAM,CAAE,CAAzB;AACD,GAjBD;;AAmBAC,YAAU,YAAM;AACdrB,WAAOsB,KAAP;AACD,GAFD;;AAIAC,KAAG,8BAAH,EAAmC,gBAAQ;AACzC,QAAIC,eAAe;AACjBC,iBAAW,OADM;AAEjBC,aAAO,CAFU;AAGjBC,YAAM,EAAEC,KAAK,OAAP;AAHW,KAAnB;;AAMA,QAAIC,UAAU,EAAE,gBAAgB,kBAAlB,EAAd;AACA,sBAAQb,IAAR,CACE;AACEc,WAAK,qCADP;AAEEC,eAAS,IAFX;AAGEF,eAASA,OAHX;AAIEG,YAAMC,KAAKC,SAAL,CAAeV,YAAf;AAJR,KADF,EAOE,UAACW,GAAD,EAAMC,QAAN,EAAmB,CAAE,CAPvB;;AAUA,aAASC,kBAAT,CAA4BC,IAA5B,EAAwC;AACtC,UAAIX,OAAO,EAAX;AACA,UAAIY,cAAJ;AACAD,WAAKX,IAAL,CAAUa,OAAV,CAAkB,eAAO;AACvB,YAAIC,IAAIC,KAAJ,KAAc,QAAlB,EAA4B;AAC1BH,kBAAQE,IAAIE,IAAZ;AACD,SAFD,MAEO,IAAIF,IAAIC,KAAJ,KAAc,QAAlB,EAA4B;AACjCH,kBAAQE,IAAIG,OAAZ;AACD,SAFM,MAEA,IAAIH,IAAIC,KAAJ,KAAc,MAAlB,EAA0B;AAC/BH,kBAAQE,IAAII,KAAZ;AACD,SAFM,MAEA,IAAIJ,IAAIC,KAAJ,KAAc,MAAlB,EAA0B;AAC/BH,kBAAQE,IAAIK,KAAZ;AACD,SAFM,MAEA;AACLP,kBAAQE,IAAIM,OAAZ;AACD;;AAEDpB,aAAKqB,IAAL,CAAU,EAAEpB,KAAKa,IAAIb,GAAX,EAAgBW,OAAOA,KAAvB,EAAV;AACD,OAdD;AAeA,aAAOZ,IAAP;AACD;AACD3B,WAAOiD,EAAP,CAAU,WAAV,EAAuB,YAAW;AAChC,UAAIC,UAAUlD,OAAOkD,OAAP,EAAd;AACD,KAFD;AAGAlD,WAAOiD,EAAP,CAAU,SAAV,EAAqB,UAASE,GAAT,EAAcC,MAAd,EAAsB;AACzC,UAAIC,YAAYpD,OAAOqD,KAAP,CAAaC,SAAb,CAAuBC,kBAAvB,CAA0CC,QAA1C,CAAmDN,GAAnD,EAAwD,CAAxD,CAAhB;AACA,UAAIO,QAAQL,UAAUd,KAAV,CAAgBP,IAAhB,CAAqB0B,KAAjC;;AAEA,mBAAOC,KAAP,CAAaD,MAAME,KAAN,CAAYC,MAAzB,EAAiC,CAAjC;;AAEAH,YAAME,KAAN,CAAYpB,OAAZ,CAAoB,gBAAQ;AAC1BF,aAAKwB,KAAL,GAAazB,mBAAmBC,IAAnB,CAAb;AACA,qBAAOqB,KAAP,CAAarB,KAAKyB,aAAlB,EAAiC,OAAjC;AACA,qBAAOC,IAAP,CACE,oBAAgBC,OAAhB,CAAwB3B,IAAxB,EAA8B;AAC5BV,eAAK;AADuB,SAA9B,CADF;AAKD,OARD;AASAsC;AACD,KAhBD;AAiBD,GA1DD;AA2DD,CAtFD","file":"endtoend_handler.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport EndToEndHandler from '../src/endtoend_handler';\nimport path from 'path';\nimport request from 'request';\nimport JaegerTestUtils from '../../src/test_util';\nimport { Thrift } from 'thriftrw';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nconst PORT = 6832;\nconst HOST = '127.0.0.1';\n\ndescribe('Endtoend Handler should', () => {\n  let server;\n  let thrift;\n\n  beforeEach(() => {\n    server = dgram.createSocket('udp4');\n    server.bind(PORT, HOST);\n    thrift = new Thrift({\n      entryPoint: path.join(__dirname, '../../src/thriftrw-idl/agent.thrift'),\n      allowOptionalArguments: true,\n      allowFilesystemAccess: true,\n    });\n\n    let handler = new EndToEndHandler({ port: PORT, host: HOST });\n    let app = express();\n    app.use(bodyParser.json());\n    app.post('/create_traces', (req, res) => {\n      handler.generateTraces(req, res);\n    });\n\n    app.listen(8083, () => {});\n  });\n\n  afterEach(() => {\n    server.close();\n  });\n\n  it('report spans to local server', done => {\n    let traceRequest = {\n      operation: 'leela',\n      count: 5,\n      tags: { key: 'value' },\n    };\n\n    let headers = { 'Content-Type': 'application/json' };\n    request.post(\n      {\n        url: 'http://127.0.0.1:8083/create_traces',\n        forever: true,\n        headers: headers,\n        body: JSON.stringify(traceRequest),\n      },\n      (err, response) => {}\n    );\n\n    function thriftTagsToObject(span: Span) {\n      let tags = [];\n      let value;\n      span.tags.forEach(tag => {\n        if (tag.vType === 'STRING') {\n          value = tag.vStr;\n        } else if (tag.vType === 'DOUBLE') {\n          value = tag.vDouble;\n        } else if (tag.vType === 'BOOL') {\n          value = tag.vBool;\n        } else if (tag.vType === 'LONG') {\n          value = tag.vLong;\n        } else {\n          value = tag.vBinary;\n        }\n\n        tags.push({ key: tag.key, value: value });\n      });\n      return tags;\n    }\n    server.on('listening', function() {\n      let address = server.address();\n    });\n    server.on('message', function(msg, remote) {\n      let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n      let batch = thriftObj.value.body.batch;\n\n      assert.equal(batch.spans.length, 5);\n\n      batch.spans.forEach(span => {\n        span._tags = thriftTagsToObject(span);\n        assert.equal(span.operationName, 'leela');\n        assert.isOk(\n          JaegerTestUtils.hasTags(span, {\n            key: 'value',\n          })\n        );\n      });\n      done();\n    });\n  });\n});\n"]}