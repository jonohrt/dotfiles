{"version":3,"sources":["../../../crossdock/src/endtoend_handler.js"],"names":["constants","EndToEndHandler","options","_tracers","tracerConfig","serviceName","reporter","flushIntervalMs","agentHost","host","agentPort","port","sampler","type","SAMPLER_TYPE_REMOTE","param","refreshIntervalMs","SAMPLER_TYPE_CONST","req","res","traceRequest","body","samplerType","_createTraces","operation","count","tags","sendStatus","operationName","numTraces","i","_createAndReportTrace","span","startSpan","finish"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;;IAAYA,S;;;;;;IAESC,e;;AAGnB;;;;;;;;;;;;;;;;;;;;AAoBA,6BAA+B;AAAA,QAAnBC,OAAmB,uEAAJ,EAAI;;AAAA;;AAC7B,SAAKC,QAAL,GAAgB,EAAhB;AACA,QAAIC,eAAoB;AACtBC,mBAAa,gBADS;AAEtBC,gBAAU;AACRC,yBAAiB,IADT;AAERC,mBAAWN,QAAQO,IAAR,IAAgB,cAFnB;AAGRC,mBAAWR,QAAQS,IAAR,IAAgB;AAHnB,OAFY;AAOtBC,eAAS;AACPC,cAAMb,UAAUc,mBADT;AAEPC,eAAO,CAFA;AAGPN,cAAM,cAHC;AAIPE,cAAM,IAJC;AAKPK,2BAAmB;AALZ;AAPa,KAAxB;AAeA,SAAKb,QAAL,CAAcH,UAAUc,mBAAxB,IAA+C,uBAAWV,YAAX,CAA/C;;AAEAA,iBAAaQ,OAAb,CAAqBC,IAArB,GAA4Bb,UAAUiB,kBAAtC;AACA,SAAKd,QAAL,CAAcH,UAAUiB,kBAAxB,IAA8C,uBAAWb,YAAX,CAA9C;AACD;;;;mCAEcc,G,EAAUC,G,EAAgB;AACvC,UAAIC,eAAeF,IAAIG,IAAvB;AACA,UAAIC,cAAcF,aAAaP,IAAb,IAAqBb,UAAUc,mBAAjD;AACA,WAAKS,aAAL,CAAmBD,WAAnB,EAAgCF,aAAaI,SAA7C,EAAwDJ,aAAaK,KAArE,EAA4EL,aAAaM,IAAzF;AACAP,UAAIQ,UAAJ,CAAe,GAAf;AACD;;;kCAEaL,W,EAAqBM,a,EAAuBC,S,EAAmBH,I,EAAiB;AAC5F,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,SAApB,EAA+BC,GAA/B,EAAoC;AAClC,aAAKC,qBAAL,CAA2BT,WAA3B,EAAwCM,aAAxC,EAAuDF,IAAvD;AACD;AACF;;;0CAEqBJ,W,EAAqBM,a,EAAuBF,I,EAAiB;AACjF,UAAIM,OAAO,KAAK7B,QAAL,CAAcmB,WAAd,EAA2BW,SAA3B,CAAqCL,aAArC,EAAoD,EAAEF,MAAMA,IAAR,EAApD,CAAX;AACAM,WAAKE,MAAL;AACD;;;;;;kBA9DkBjC,e","file":"endtoend_handler.js","sourcesContent":["// @flow\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { initTracer } from '../../src/index';\nimport * as constants from '../../src/constants.js';\n\nexport default class EndToEndHandler {\n  _tracers: {};\n\n  /**\n   * Handler that creates traces from a http request.\n   *\n   * json: {\n   *   \"type\": \"remote\"\n   *   \"operation\": \"operationName\",\n   *   \"count\": 2,\n   *   \"tags\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * Given the above json payload, the handler will use a tracer with the RemoteSampler to\n   * create 2 traces for the \"operationName\" operation with the tags: {\"key\":\"value\"}.\n   * These traces are reported to the agent with the hostname \"test_driver\".\n   *\n   * @param {object} [options] - optional settings\n   * @param {string} [options.host] - host for jaeger-agent reporting endpoint, defaults to 'test_driver'\n   * @param {number} [options.port] - port for jaeger-agent reporting endpoint, defaults to 6832\n   */\n  constructor(options: any = {}) {\n    this._tracers = {};\n    let tracerConfig: any = {\n      serviceName: 'crossdock-node',\n      reporter: {\n        flushIntervalMs: 1000,\n        agentHost: options.host || 'jaeger-agent',\n        agentPort: options.port || 6832,\n      },\n      sampler: {\n        type: constants.SAMPLER_TYPE_REMOTE,\n        param: 1,\n        host: 'jaeger-agent',\n        port: 5778,\n        refreshIntervalMs: 5000,\n      },\n    };\n    this._tracers[constants.SAMPLER_TYPE_REMOTE] = initTracer(tracerConfig);\n\n    tracerConfig.sampler.type = constants.SAMPLER_TYPE_CONST;\n    this._tracers[constants.SAMPLER_TYPE_CONST] = initTracer(tracerConfig);\n  }\n\n  generateTraces(req: any, res: any): void {\n    let traceRequest = req.body;\n    let samplerType = traceRequest.type || constants.SAMPLER_TYPE_REMOTE;\n    this._createTraces(samplerType, traceRequest.operation, traceRequest.count, traceRequest.tags);\n    res.sendStatus(200);\n  }\n\n  _createTraces(samplerType: string, operationName: string, numTraces: number, tags: any): void {\n    for (let i = 0; i < numTraces; i++) {\n      this._createAndReportTrace(samplerType, operationName, tags);\n    }\n  }\n\n  _createAndReportTrace(samplerType: string, operationName: string, tags: any): void {\n    let span = this._tracers[samplerType].startSpan(operationName, { tags: tags });\n    span.finish();\n  }\n}\n"]}