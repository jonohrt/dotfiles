{"version":3,"sources":["../../../crossdock/src/tchannel_server.js"],"names":["constants","DEFAULT_THRIFT_PATH","TChannelServer","crossdockSpecPath","_tracer","_helpers","serverChannel","serviceName","tchannelThrift","channel","entryPoint","context","bridge","tracedHandler","handleTChannelRequest","bind","register","listen","myIp","log","perProcessOptions","req","head","body","callback","isStartRequest","traceRequest","request","serverRole","json2str","promise","handleRequest","getSpan","then","ok","tchannelResp","require","main","module","tchannel"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIC,sBAAsB,6BAA1B;;IACqBC,c;AAInB,4BAA6D;AAAA,QAAjDC,iBAAiD,uEAArBF,mBAAqB;;AAAA;;AAC3D,SAAKG,OAAL,GAAe,qBAAW,MAAX,EAAmB,kCAAnB,EAA2C,4BAAiB,KAAjB,CAA3C,CAAf;AACA,SAAKC,QAAL,GAAgB,sBAAY,KAAKD,OAAjB,CAAhB;;AAEA,QAAIE,gBAAgB,wBAAS,EAAEC,aAAa,MAAf,EAAT,CAApB;AACA,QAAIC,iBAAiB,sBAAe;AAClCC,eAASH,aADyB;AAElCI,kBAAYP;AAFsB,KAAf,CAArB;AAIA,QAAIQ,UAAU,+BAAd;;AAEA,QAAIC,SAAS,8BAAmB,KAAKR,OAAxB,CAAb;AACA,QAAIS,gBAAgBD,OAAOC,aAAP,CAAqB,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAArB,CAApB;AACAP,mBAAeQ,QAAf,CAAwBV,aAAxB,EAAuC,0BAAvC,EAAmEK,OAAnE,EAA4EE,aAA5E;;AAEAP,kBAAcW,MAAd,CAAqB,IAArB,EAA2B,eAAMC,IAAN,EAA3B,EAAyC,YAAM;AAC7C,wBAAQC,GAAR,CAAY,2CAAZ;AACD,KAFD;AAGD;;;;0CAEqBC,iB,EAAwBC,G,EAAUC,I,EAAWC,I,EAAWC,Q,EAAoB;AAChG,UAAIC,iBAA0B,KAA9B;AACA,UAAIC,eAAeH,KAAKI,OAAxB;AACA,UAAIhB,UAAUU,IAAIV,OAAlB;AACA,wBAAQQ,GAAR,CACE,UADF,EAEEO,aAAaE,UAFf,EAGE,4BAHF,EAIE,kBAAQC,QAAR,CAAiBH,YAAjB,CAJF;;AAOA,UAAII,UAAU,KAAKzB,QAAL,CAAc0B,aAAd,CAA4BN,cAA5B,EAA4CC,YAA5C,EAA0Df,QAAQqB,OAAR,EAA1D,CAAd;;AAEAF,cAAQG,IAAR,CAAa,wBAAgB;AAC3BT,iBAAS,IAAT,EAAe;AACbU,cAAI,IADS;AAEbX,gBAAMY;AAFO,SAAf;AAID,OALD;AAMD;;;;;;kBA3CkBjC,c;;;AA8CrB,IAAKkC,OAAD,CAAeC,IAAf,KAAwBC,MAA5B,EAAoC;AAClC,MAAIC,WAAW,IAAIrC,cAAJ,EAAf;AACD","file":"tchannel_server.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from './constants.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultContext from '../../src/default_context.js';\nimport Helpers from './helpers';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport Tracer from '../../src/tracer.js';\nimport opentracing from 'opentracing';\nimport path from 'path';\nimport TChannelBridge from '../../src/tchannel_bridge';\n\nimport TChannel from 'tchannel';\nimport TChannelThrift from 'tchannel/as/thrift';\nimport Utils from '../../src/util.js';\n\nlet DEFAULT_THRIFT_PATH = '/crossdock/tracetest.thrift';\nexport default class TChannelServer {\n  _tracer: Tracer;\n  _helpers: any;\n\n  constructor(crossdockSpecPath: string = DEFAULT_THRIFT_PATH) {\n    this._tracer = new Tracer('node', new InMemoryReporter(), new ConstSampler(false));\n    this._helpers = new Helpers(this._tracer);\n\n    let serverChannel = TChannel({ serviceName: 'node' });\n    let tchannelThrift = TChannelThrift({\n      channel: serverChannel,\n      entryPoint: crossdockSpecPath,\n    });\n    let context = new DefaultContext();\n\n    let bridge = new TChannelBridge(this._tracer);\n    let tracedHandler = bridge.tracedHandler(this.handleTChannelRequest.bind(this));\n    tchannelThrift.register(serverChannel, 'TracedService::joinTrace', context, tracedHandler);\n\n    serverChannel.listen(8082, Utils.myIp(), () => {\n      Helpers.log('TChannel server listening on port 8082...');\n    });\n  }\n\n  handleTChannelRequest(perProcessOptions: any, req: any, head: any, body: any, callback: Function) {\n    let isStartRequest: boolean = false;\n    let traceRequest = body.request;\n    let context = req.context;\n    Helpers.log(\n      'TChannel',\n      traceRequest.serverRole,\n      'received joinTrace request',\n      Helpers.json2str(traceRequest)\n    );\n\n    let promise = this._helpers.handleRequest(isStartRequest, traceRequest, context.getSpan());\n\n    promise.then(tchannelResp => {\n      callback(null, {\n        ok: true,\n        body: tchannelResp,\n      });\n    });\n  }\n}\n\nif ((require: any).main === module) {\n  let tchannel = new TChannelServer();\n}\n"]}